/* Query program */


/* EDB vertex */
edb1 baseReturn(@Ret,QID,VID,Prov) :- baseQuery(@X,QID,VID,Ret), Prov:=f_pEDB(VID,X).

/* root vertex */
idb1 pQList(@X,QID,a_LIST<RID>) :- provQuery(@X,QID,VID,Ret),
       provRoot(@X,VID,RID,RLoc), RID!=VID.
idb2 pResultTmp(@X,QID,Ret,VID,Buf) :-
       provQuery(@X,QID,VID,Ret), Buf:=f_empty().

idb3 pIterate(@X,QID,N) :- provQuery(@X,QID,VID,Ret), N:=1.
idb4 pIterate(@X,QID,N) :- pIterate(@X,QID,N1),
       pQList(@X,QID,List), N1<f_size(List), N:=N1+1.

idb5 eRuleQuery(@X,NQID,RID) :- pIterate(@X,QID,N),
       pQList(@X,QID,List), N<=f_size(List),
       RID:=f_item(List,N), NQID:=f_sha1(""+QID+RID).
idb6 ruleQuery(@RLoc,QID,RID,X) :- eRuleQuery(@X,QID,RID),
       provRoot(@X,VID,RID,RLoc).

idb7 pResultTmp(@X,QID,Ret,VID,Buf) :- rReturn(@X,NQID,RID,Prov),
       pResultTmp(@X,QID,Ret,VID,Buf1), NQID==f_sha1(""+QID+RID),
       Buf2:=f_append(Prov), Buf:=f_concat(Buf1,Buf2).

idb8 ePReturn(@X,QID) :- pResultTmp(@X,QID,Ret,VID,Buf),
       pQList(@X,QID,List),
       f_size(Buf)==f_size(List), f_size(Buf)!=0.

idb9 pReturn(@Ret,QID,VID,Prov) :- ePReturn(@X,QID),
       pResultTmp(@X,QID,Ret,VID,Buf), Prov:=f_pIDB(Buf,X).


/* Rule Vertex */
rv1 rQList(@X,QID,List) :- ruleQuery(@X,QID,RID,Ret),
      ruleExec(@X,RID,R,List, PreLoc, PreRID).

rv2 ruleQuery(@PreLoc,NQID,PreRID,Ret) :- ruleQuery(@X,QID,RID,Ret), 
	ruleExec(@X,RID,R,List, PreLoc, PreRID),
	PreRID != f_sha1("NULL"),
	NQID:=f_sha1(""+QID+PreRID).

rv3 childWait(@X,QID,RID,Ret,Itm) :- ruleQuery(@X,QID,RID,Ret), 
	ruleExec(@X,RID,R,List, PreLoc, PreRID),
	PreRID == f_sha1("NULL"),
	NQID:=f_sha1(""+QID+PreRID),
	Itm := 0.

rv4 childWait(@X,QID,RID,Ret,Itm) :- ruleQuery(@X,QID,RID,Ret), 
	ruleExec(@X,RID,R,List, PreLoc, PreRID),
	PreRID != f_sha1("NULL"),
	NQID:=f_sha1(""+QID+PreRID),
	Itm := 1.

rv5 rResultTmp(@X,QID,Ret,RID,Buf) :-
      ruleQuery(@X,QID,RID,Ret), Buf:=f_empty().

rv6 rIterate(@X,QID,N) :- ruleQuery(@X,QID,RID,Ret), N:=1.
rv7 rIterate(@X,QID,N) :- rIterate(@X,QID,N1),
      rQList(@X,QID,List), N1<f_size(List), N:=N1+1.

rv8 baseQuery(@X,NQID,VID,X) :- rIterate(@X,QID,N),
      rQList(@X,QID,List),
      VID:=f_item(List,N), NQID:=f_sha1(""+QID+VID).

rv9 rResultTmp(@X,QID,Ret,RID,Buf) :- baseReturn(@X,NQID,VID,Prov),
      rResultTmp(@X,QID,Ret,RID,Buf1), NQID==f_sha1(""+QID+VID),
      Buf2:=f_append(Prov), Buf:=f_concat(Buf1,Buf2).

rv10 rResultTmp(@X,QID,Ret,RID,Buf):- rReturn(@X,NQID,RID,Prov), 
	rResultTmp(@X,QID,Ret,RID,Buf1),
	NQID==f_sha1(""+QID+RID),
	Buf2:=f_append(Prov),
	Buf:=f_concat(Buf2, Buf1).

rv11 eRReturn(@X,QID) :- rResultTmp(@X,QID,Ret,RID,Buf),
	childWait(@X,QID,RID,Ret,Itm), Itm == 1,
      rQList(@X,QID,List), f_size(Buf)==f_size(List)+1.

rv12 eRReturn(@X,QID) :- rResultTmp(@X,QID,Ret,RID,Buf),
	childWait(@X,QID,RID,Ret,Itm), Itm == 0,
      rQList(@X,QID,List), f_size(Buf)==f_size(List).

rv13 rReturn(@Ret,QID,RID,Prov) :- eRReturn(@X,QID),
      rResultTmp(@X,QID,Ret,RID,Buf),
      ruleExec(@X,RID,R,List,PreLoc,PreRID), Prov:=f_pRULE(Buf,X,R).


q1 recvCount(@Node,Src,Dst,Data,a_COUNT<*>):-
   recvPacket(@Node,Src,Dst,Data,RID,RLOC),
   recordSD(@Node,Src,Dst).


q2 recordSD(@Node,Src,Dst):-
   recvCount(@Node,Src,Dst,Data,Rcount),
   Rcount==0.

q3 initProvQuery(@Node,QID,UID,Dst):-
   recvCount(@Node,Src,Dst,Data,Rcount),
   Rcount==0,
   Time:=f_now(),
   UID:=f_sha1("recvPacket"+Node+Src+Dst+Data),
   QID:=f_sha1(""+UID+Time).

q4 provQuery(@Node,QID,UID,Dst):-
   initProvQuery(@Node,QID,UID,Dst).

q5 recordProv(@Node,QID,UID,Prov):-
   initProvQuery(@Node,QID,UID,Dst),
   pReturn(@Node,QID,UID,Prov).
