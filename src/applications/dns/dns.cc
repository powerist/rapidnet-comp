/* A RapidNet application. Generated by RapidNet compiler. */

#include "dns.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::dns;

const string Dns::ADDRESS_RECORD = "address_record";
const string Dns::NAME_SERVER = "name_server";
const string Dns::R3RESULTSEND = "r3resultsend";
const string Dns::REQUEST = "request";
const string Dns::RESULT = "result";
const string Dns::URL = "url";

NS_LOG_COMPONENT_DEFINE ("Dns");
NS_OBJECT_ENSURE_REGISTERED (Dns);

TypeId
Dns::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::dns::Dns")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Dns> ()
    ;
  return tid;
}

Dns::Dns()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Dns::~Dns()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Dns::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Dns::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Dns Application Started");
}

void
Dns::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Dns Application Stopped");
}

void
Dns::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ADDRESS_RECORD, attrdeflist (
    attrdef ("address_record_attr1", IPV4),
    attrdef ("address_record_attr2", STR),
    attrdef ("address_record_attr3", IPV4)));

  AddRelationWithKeys (NAME_SERVER, attrdeflist (
    attrdef ("name_server_attr1", IPV4),
    attrdef ("name_server_attr2", STR),
    attrdef ("name_server_attr3", STR)));

  AddRelationWithKeys (RESULT, attrdeflist (
    attrdef ("result_attr1", IPV4),
    attrdef ("result_attr2", STR),
    attrdef ("result_attr3", IPV4),
    attrdef ("result_attr4", INT32)));

  AddRelationWithKeys (URL, attrdeflist (
    attrdef ("url_attr1", IPV4),
    attrdef ("url_attr2", STR),
    attrdef ("url_attr3", IPV4),
    attrdef ("url_attr4", INT32)));

}

void
Dns::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, URL))
    {
      R1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, NAME_SERVER))
    {
      R1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, ADDRESS_RECORD))
    {
      R1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      R2_eca (tuple);
    }
  if (IsRecvEvent (tuple, R3RESULTSEND))
    {
      R3ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      R3_eca (tuple);
    }
}

void
Dns::R1Eca0Ins (Ptr<Tuple> url)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    url,
    strlist ("name_server_attr1"),
    strlist ("url_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "url_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("url_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("url_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    REQUEST,
    strlist ("address_record_attr3",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "address_record_attr3"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      RN_DEST));

  Send (result);
}

void
Dns::R1Eca1Ins (Ptr<Tuple> name_server)
{
  RAPIDNET_LOG_INFO ("R1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (URL)->Join (
    name_server,
    strlist ("url_attr1"),
    strlist ("name_server_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "name_server_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("url_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("url_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    REQUEST,
    strlist ("address_record_attr3",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "address_record_attr3"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      RN_DEST));

  Send (result);
}

void
Dns::R1Eca2Ins (Ptr<Tuple> address_record)
{
  RAPIDNET_LOG_INFO ("R1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (URL)->Join (
    address_record,
    strlist ("url_attr1"),
    strlist ("address_record_attr1"));

  result = GetRelation (NAME_SERVER)->Join (
    result,
    strlist ("name_server_attr3", "name_server_attr1"),
    strlist ("address_record_attr2", "address_record_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("url_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("url_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    REQUEST,
    strlist ("address_record_attr3",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "address_record_attr3"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      RN_DEST));

  Send (result);
}

void
Dns::R2_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("R2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    REQUEST,
    strlist ("address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "address_record_attr3"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      RN_DEST));

  Send (result);
}

void
Dns::R3ECAMat (Ptr<Tuple> r3resultsend)
{
  RAPIDNET_LOG_INFO ("R3ECAMat triggered");

  Ptr<Tuple> result = r3resultsend;

  result = result->Project (
    RESULT,
    strlist ("r3resultsend_attr1",
      "r3resultsend_attr2",
      "r3resultsend_attr3",
      "r3resultsend_attr4"),
    strlist ("result_attr1",
      "result_attr2",
      "result_attr3",
      "result_attr4"));

  Insert (result);
}

void
Dns::R3_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("R3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    R3RESULTSEND,
    strlist ("address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "address_record_attr3"),
    strlist ("r3resultsend_attr1",
      "r3resultsend_attr2",
      "r3resultsend_attr3",
      "r3resultsend_attr4",
      RN_DEST));

  Send (result);
}

