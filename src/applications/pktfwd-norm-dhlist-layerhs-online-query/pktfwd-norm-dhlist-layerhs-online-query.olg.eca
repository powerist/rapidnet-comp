ECA Rule r00Eca1Ins ACTION_LOCAL_SEND<prov(@Host, VID, RID, $1)> :- EVENT_INSERT<initPacket(@Host, SrcAdd, DstAdd, Data)>, $1 := Host, VID := f_sha1((((initPacket+ Host)+ SrcAdd)+ DstAdd)+ Data), RID := VID.
ECA Rule r01Eca1Ins ACTION_LOCAL_SEND<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<link(@Node, Next)>, $1 := Node, VID := f_sha1((link+ Node)+ Next), RID := VID.
ECA Rule r02Eca1Ins ACTION_LOCAL_SEND<prov(@Switch, VID, RID, $1)> :- EVENT_INSERT<flowEntry(@Switch, DstEntry, Next)>, $1 := Switch, VID := f_sha1(((flowEntry+ Switch)+ DstEntry)+ Next), RID := VID.
ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List := f_append(PID3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1(R+ List).
ECA Rule prov_rs1_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rs1_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketCount(@RLOC, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule prov_rs1_4_eca ACTION_ADD<provLink(@RLOC, ProgID, RID, CurLhash, Preloc, PreRID, PreLhash)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Preloc := f_first(Tag), TempTag1 := f_removeFirst(Tag), PreRID := f_first(TempTag1), TempTag2 := f_removeFirst(TempTag1), PreLhash := f_first(TempTag2), TempTag3 := f_removeFirst(TempTag2), ProgID := f_first(TempTag3), CurLhash := f_sha1(PreLhash+ RID).
ECA Rule prov_rs1_5_eca ACTION_REMOTE_SEND<packetProv(@Next, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, TempNewTag1 := f_removeFirst(Tag), TempNewTag2 := f_removeFirst(TempNewTag1), PreLhash := f_first(TempNewTag2), CurLhash := f_sha1(PreLhash+ RID), CurLhashlist := f_append(CurLhash), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(CurLhashlist, TempNewTag3), TempNewTag5 := f_concat(RIDlist, TempNewTag4), NewTag := f_concat(Loclist, TempNewTag5).
ECA Rule rs1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next).
ECA Rule prov_ri1Eca0Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, programID(@Node, DstAdd, ProgID), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri1Eca1Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<programID(@Node, DstAdd, ProgID)>, initPacket(@Node, SrcAdd, DstAdd, Data), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri2_eca ACTION_LOCAL_SEND<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, COUNT< * >)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, DstAdd, PIDequi).
ECA Rule prov_ri3_eca ACTION_ADD<equiHashTable(@Node, DstAdd, PIDequi)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, PIDcount == 0.
ECA Rule rh1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDcount != 0, PIDequiHash := f_append(PIDequi), PIDevHash := f_append(PIDev), ProgIDlist := f_append(ProgID), PIDHash1 := f_concat(PIDequiHash, PIDevHash), PIDHash := f_concat(PIDHash1, ProgIDlist).
ECA Rule prov_rh1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDcount == 0, PID := f_sha1((link+ Node)+ Next), List := f_append(PID), RLOC := Node, R := rh1, RID := f_sha1(R+ List), Equilist := f_append(PIDequi), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Evlist := f_append(PIDev), ProgIDlist := f_append(ProgID), InitLhashlist := f_append(NULL), InitProvNode := RLOC, InitProvNodelist := f_append(InitProvNode), InitProvHash := f_sha1(NULL), InitProvHashlist := f_append(InitProvHash), TempTag1 := f_concat(InitProvNodelist, InitProvHashlist), TempTag2 := f_concat(TempTag1, InitLhashlist), TempTag3 := f_concat(TempTag2, ProgIDlist), TempTag4 := f_concat(TempTag3, Evlist), Tag := f_concat(TempTag4, Equilist).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, DstAdd == Node, PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), RLOC := Node, R := rh2, RID := f_sha1(R+ List).
ECA Rule prov_rh2_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rh2_4_eca ACTION_ADD<provLink(@RLOC, ProgID, RID, CurLhash, Preloc, PreRID, PreLhash)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Preloc := f_first(Tag), TempTag1 := f_removeFirst(Tag), PreRID := f_first(TempTag1), TempTag2 := f_removeFirst(TempTag1), PreLhash := f_first(TempTag2), TempTag3 := f_removeFirst(TempTag2), ProgID := f_first(TempTag3), CurLhash := f_sha1(PreLhash+ RID).
ECA Rule prov_rh2_5_eca ACTION_REMOTE_SEND<recvPacketProv(@Node, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, TempNewTag1 := f_removeFirst(Tag), TempNewTag2 := f_removeFirst(TempNewTag1), PreLhash := f_first(TempNewTag2), CurLhash := f_sha1(PreLhash+ RID), CurLhashlist := f_append(CurLhash), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(CurLhashlist, TempNewTag3), TempNewTag5 := f_concat(RIDlist, TempNewTag4), NewTag := f_concat(Loclist, TempNewTag5).
ECA Rule prov_rh2_6_eca ACTION_LOCAL_SEND<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, NewTag)>.
ECA Rule ro1_eca ACTION_ADD<provHashTable(@Node, ProvID, ProgID, PreLoc, PreRID, PreLhash)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, PreLoc := f_first(Tag), RemainTag1 := f_removeFirst(Tag), PreRID := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), PreLhash := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), ProgID := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), EvHash := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), EqHash := f_first(RemainTag5), ProvID := f_sha1((+ ProgID)+ EqHash).
ECA Rule ro2_eca ACTION_ADD<recvPacketQry(@Node, SrcAdd, DstAdd, PID, ProvID, EvHash)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PreLoc := f_first(Tag), RemainTag1 := f_removeFirst(Tag), PreRID := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), PreLhash := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), ProgID := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), EvHash := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), EqHash := f_first(RemainTag5), ProvID := f_sha1((ProgID+ )+ EqHash).
ECA Rule rh2_eca ACTION_LOCAL_SEND<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, DstAdd == Node.
ECA Rule rho3_eca ACTION_ADD<recvPacketQry(@Node, SrcAdd, DstAdd, PID, ProvID, PIDev)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, DstAdd == Node, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDequi := f_first(PIDHash), PIDHash1 := f_removeFirst(PIDHash), PIDev := f_first(PIDHash1), PIDHash2 := f_removeFirst(PIDHash1), ProgID := f_first(PIDHash2), ProvID := f_sha1((ProgID+ )+ PIDequi).
ECA Rule edb1_eca ACTION_REMOTE_SEND<baseReturn(@Ret, QID, PID, Prov)> :- EVENT_RECV<baseQuery(@X, QID, PID, Ret)>, Prov := f_pEDB(PID, X).
ECA Rule idb1_eca ACTION_REMOTE_SEND<ruleQuery(@PreLoc, NQID, PreRID, X, PIDev)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret, ProvID, PIDev)>, provHashTable(@X, ProvID, ProgID, PreLoc, PreRID, PreLhash), NQID := f_sha1((+ QID)+ PreRID).
ECA Rule idb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret, ProvID, PIDev)>, Buf := f_empty().
ECA Rule idb7_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule idb8Eca0Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, f_size(Buf) != 0.
ECA Rule idb9_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<ePReturn(@X, QID)>, pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, List)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret, PIDev)>, ruleExec(@X, RID, R, List).
ECA Rule rv2_eca ACTION_REMOTE_SEND<ruleQuery(@PreLoc, NQID, PreRID, X, PIDev)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret, PIDev)>, provLink(@X, RID, CurCount, PreLoc, PreRID, PreCount), NQID := f_sha1((+ QID)+ PreRID), PreRID != f_sha1(NULL).
ECA Rule rv3_eca ACTION_LOCAL_SEND<baseQuery(@X, NQID, PIDev, $1)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret, PIDev)>, provLink(@X, RID, CurCount, PreLoc, PreRID, PreCount), $1 := X, PreRID == f_sha1(NULL), NQID := f_sha1((+ QID)+ PIDev).
ECA Rule rv4_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret, PIDev)>, Buf := f_empty().
ECA Rule rv5_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret, PIDev)>, N := 1.
ECA Rule rv6_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule rv7_eca ACTION_LOCAL_SEND<baseQuery(@X, NQID, VID, $1)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, List), $1 := X, VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv8_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<baseReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv9_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, PreRID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ PreRID), Buf2 := f_append(Prov), Buf := f_concat(Buf2, Buf1).
ECA Rule rv10Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, rQList(@X, QID, List), f_size(Buf) == f_size(List)+ 1.
ECA Rule rv10Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rQList(@X, QID, List)>, rResultTmp(@X, QID, Ret, RID, Buf), f_size(Buf) == f_size(List)+ 1.
ECA Rule rv11_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID)>, rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, R, List), Prov := f_pRULE(Buf, X, R).
ECA Rule q0Eca0Ins ACTION_LOCAL_SEND<recvPacketQryProv(@Node, Src, Dst, VID, ProvID, PIDev)> :- EVENT_INSERT<recvPacketQry(@Node, Src, Dst, VID, ProvID, PIDev)>.
ECA Rule q1_eca ACTION_LOCAL_SEND<recvCount(@Node, Src, Dst, VID, ProvID, PIDev, COUNT< * >)> :- EVENT_RECV<recvPacketQryProv(@Node, Src, Dst, VID, ProvID, PIDev)>, recordSD(@Node, Src, Dst).
ECA Rule q2_eca ACTION_ADD<recordSD(@Node, Src, Dst)> :- EVENT_RECV<recvCount(@Node, Src, Dst, VID, ProvID, PIDev, Rcount)>, Rcount == 0.
ECA Rule q3_eca ACTION_ADD<initProvQuery(@Node, QID, UID, Dst, ProvID, PIDev)> :- EVENT_RECV<recvCount(@Node, Src, Dst, VID, ProvID, PIDev, Rcount)>, Rcount == 0, Time := f_now(), UID := VID, QID := f_sha1((+ UID)+ Time).
ECA Rule q4Eca0Ins ACTION_LOCAL_SEND<provQuery(@Node, QID, UID, Dst, ProvID, PIDev)> :- EVENT_INSERT<initProvQuery(@Node, QID, UID, Dst, ProvID, PIDev)>.
ECA Rule q5_eca ACTION_LOCAL_SEND<recordProv(@Node, QID, UID, Prov)> :- EVENT_RECV<pReturn(@Node, QID, UID, Prov)>, initProvQuery(@Node, QID, UID, Dst, ProvID, PIDev).
