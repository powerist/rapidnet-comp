materialize(flowEntry, -1, 0, keys(2)
materialize(initPacket, -1, 0, keys(2, 3, 4)
materialize(link, -1, 0, keys(2)
materialize(pQList, -1, 0, keys(1, 2)
materialize(pResultTmp, -1, 0, keys(1, 2)
materialize(prov, -1, 0, keys(1, 2, 3)
materialize(rQList, -1, 0, keys(1, 2)
materialize(rResultTmp, -1, 0, keys(1, 2)
materialize(recvPacket, -1, 0, keys(2, 3, 4)
materialize(ruleExec, -1, 0, keys(1, 2)
prov_rs1_1 epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List) :- packet(@Node, SrcAdd, DstAdd, Data), PID1 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID1), flowEntry(@Node, DstAdd, Next), PID2 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List2 := f_append(PID2), List := f_concat(List, List2), link(@Node, Next), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List).
prov_rs1_2 ruleExec(@RLOC, RID, R, List) :- epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List).
prov_rs1_3 epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC) :- epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List).
prov_rs1_4 packet(@Next, SrcAdd, DstAdd, Data) :- epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC).
prov_rs1_5 prov(@Next, VID, RID, RLOC) :- epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC), VID := f_sha1((((packet+ Next)+ SrcAdd)+ DstAdd)+ Data).
prov_rh1_1 epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List) :- initPacket(@Node, SrcAdd, DstAdd, Data), PID1 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID1), link(@Node, Next), PID2 := f_sha1((link+ Node)+ Next), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
prov_rh2_1 erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List) :- packet(@Node, SrcAdd, DstAdd, Data), PID1 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID1), DstAdd == Node, RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List).
prov_rh2_2 ruleExec(@RLOC, RID, R, List) :- erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List).
prov_rh2_3 erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC) :- erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List).
prov_rh2_4 recvPacket(@Node, SrcAdd, DstAdd, Data) :- erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC).
prov_rh2_5 prov(@Node, VID, RID, RLOC) :- erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC), VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
prov_edb_1 prov(@Node, VID, RID, $1) :- $1 := Node, flowEntry(@Node, DstAdd, Next), VID := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), RID := VID.
prov_edb_2 prov(@Node, VID, RID, $1) :- $1 := Node, initPacket(@Node, SrcAdd, DstAdd, Data), VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), RID := VID.
prov_edb_3 prov(@Node, VID, RID, $1) :- $1 := Node, link(@Node, Next), VID := f_sha1((link+ Node)+ Next), RID := VID.
edb1 pReturn(@Ret, QID, VID, Prov) :- provQuery(@X, QID, VID, Ret), prov(@X, VID, RID, RLoc), RID == VID, Prov := f_pEDB(VID, X).
idb1 pQList(@X, QID, LIST< RID >) :- provQuery(@X, QID, VID, Ret), prov(@X, VID, RID, RLoc), RID != VID.
idb2 pResultTmp(@X, QID, Ret, VID, Buf) :- provQuery(@X, QID, VID, Ret), Buf := f_empty().
idb3 pIterate(@X, QID, N) :- provQuery(@X, QID, VID, Ret), N := 1.
idb4 pIterate(@X, QID, N) :- pIterate(@X, QID, N1), pQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
idb5 eRuleQuery(@X, NQID, RID) :- pIterate(@X, QID, N), pQList(@X, QID, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
idb6 ruleQuery(@RLoc, NQID, RID, X) :- eRuleQuery(@X, NQID, RID), prov(@X, VID, RID, RLoc).
idb7 pResultTmp(@X, QID, Ret, VID, Buf) :- rReturn(@X, NQID, RID, Prov), pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
idb8 ePReturn(@X, QID) :- pResultTmp(@X, QID, Ret, VID, Buf), pQList(@X, QID, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
idb9 pReturn(@Ret, QID, VID, Prov) :- ePReturn(@X, QID), pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
rv1 rQList(@X, NQID, List) :- ruleQuery(@X, NQID, RID, Ret), ruleExec(@X, RID, R, List).
rv2 rResultTmp(@X, NQID, Ret, RID, Buf) :- ruleQuery(@X, NQID, RID, Ret), Buf := f_empty().
rv3 rIterate(@X, NQID, N) :- ruleQuery(@X, NQID, RID, Ret), N := 1.
rv4 rIterate(@X, NQID, N) :- rIterate(@X, NQID, N1), rQList(@X, NQID, List), N1 < f_size(List), N := N1+ 1.
rv5 eProvQuery(@X, NNQID, VID) :- rIterate(@X, NQID, N), rQList(@X, NQID, List), VID := f_item(List, N), NNQID := f_sha1((+ NQID)+ VID).
rv6 provQuery(@X, NNQID, VID, $1) :- $1 := X, eProvQuery(@X, NNQID, VID).
rv7 rResultTmp(@X, NQID, Ret, RID, Buf) :- pReturn(@X, NNQID, VID, Prov), rResultTmp(@X, NQID, Ret, RID, Buf1), NNQID == f_sha1((+ NQID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
rv8 eRReturn(@X, NQID) :- rResultTmp(@X, NQID, Ret, RID, Buf), rQList(@X, NQID, List), f_size(Buf) == f_size(List).
rv9 rReturn(@Ret, NQID, RID, Prov) :- eRReturn(@X, NQID), rResultTmp(@X, NQID, Ret, RID, Buf), ruleExec(@X, RID, R, List), Prov := f_pRULE(Buf, X, R).

