/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-norm-no-device.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdnormnodevice;

const string PktfwdNormNoDevice::EPRETURN = "ePReturn";
const string PktfwdNormNoDevice::EPROVQUERY = "eProvQuery";
const string PktfwdNormNoDevice::ERRETURN = "eRReturn";
const string PktfwdNormNoDevice::ERULEQUERY = "eRuleQuery";
const string PktfwdNormNoDevice::EPACKET = "epacket";
const string PktfwdNormNoDevice::EPACKETDELETE = "epacketDelete";
const string PktfwdNormNoDevice::EPACKETTEMP = "epacketTemp";
const string PktfwdNormNoDevice::EPACKETTEMPDELETE = "epacketTempDelete";
const string PktfwdNormNoDevice::ERECVPACKET = "erecvPacket";
const string PktfwdNormNoDevice::ERECVPACKETDELETE = "erecvPacketDelete";
const string PktfwdNormNoDevice::ERECVPACKETTEMP = "erecvPacketTemp";
const string PktfwdNormNoDevice::ERECVPACKETTEMPDELETE = "erecvPacketTempDelete";
const string PktfwdNormNoDevice::FLOWENTRY = "flowEntry";
const string PktfwdNormNoDevice::INITPACKET = "initPacket";
const string PktfwdNormNoDevice::LINK = "link";
const string PktfwdNormNoDevice::PITERATE = "pIterate";
const string PktfwdNormNoDevice::PQLIST = "pQList";
const string PktfwdNormNoDevice::PRESULTTMP = "pResultTmp";
const string PktfwdNormNoDevice::PRETURN = "pReturn";
const string PktfwdNormNoDevice::PACKET = "packet";
const string PktfwdNormNoDevice::PACKETDELETE = "packetDelete";
const string PktfwdNormNoDevice::PROV = "prov";
const string PktfwdNormNoDevice::PROVQUERY = "provQuery";
const string PktfwdNormNoDevice::RITERATE = "rIterate";
const string PktfwdNormNoDevice::RQLIST = "rQList";
const string PktfwdNormNoDevice::RRESULTTMP = "rResultTmp";
const string PktfwdNormNoDevice::RRETURN = "rReturn";
const string PktfwdNormNoDevice::RECVPACKET = "recvPacket";
const string PktfwdNormNoDevice::RULEEXEC = "ruleExec";
const string PktfwdNormNoDevice::RULEQUERY = "ruleQuery";

NS_LOG_COMPONENT_DEFINE ("PktfwdNormNoDevice");
NS_OBJECT_ENSURE_REGISTERED (PktfwdNormNoDevice);

TypeId
PktfwdNormNoDevice::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdnormnodevice::PktfwdNormNoDevice")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdNormNoDevice> ()
    ;
  return tid;
}

PktfwdNormNoDevice::PktfwdNormNoDevice()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdNormNoDevice::~PktfwdNormNoDevice()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdNormNoDevice::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdNormNoDevice::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormNoDevice Application Started");
}

void
PktfwdNormNoDevice::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormNoDevice Application Stopped");
}

void
PktfwdNormNoDevice::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

}

void
PktfwdNormNoDevice::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, PACKET))
    {
      Prov_rs1_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, PACKETDELETE))
    {
      Prov_rs1_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMPDELETE))
    {
      Prov_rs1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMPDELETE))
    {
      Prov_rs1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Prov_rs1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETDELETE))
    {
      Prov_rs1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPACKET))
    {
      Prov_rs1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETDELETE))
    {
      Prov_rs1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_rh1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, INITPACKET))
    {
      Prov_rh1_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_rh1_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_rh1_1Eca3Del (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Prov_rh2_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, PACKETDELETE))
    {
      Prov_rh2_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMPDELETE))
    {
      Prov_rh2_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMPDELETE))
    {
      Prov_rh2_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Prov_rh2_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETDELETE))
    {
      Prov_rh2_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKET))
    {
      Prov_rh2_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETDELETE))
    {
      Prov_rh2_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FLOWENTRY))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_edb_2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, INITPACKET))
    {
      Prov_edb_2Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_edb_3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_edb_3Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
PktfwdNormNoDevice::Prov_rs1_1_ecaAdd (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_1_ecaAdd triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packet,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packet_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packet_attr1")),
            VarExpr::New ("packet_attr2")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("packet_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("packet_attr1")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rs1_1_ecaDel (Ptr<Tuple> packetDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_1_ecaDel triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packetDelete,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packetDelete_attr3", "packetDelete_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packetDelete_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packetDelete_attr1")),
            VarExpr::New ("packetDelete_attr2")),
          VarExpr::New ("packetDelete_attr3")),
        VarExpr::New ("packetDelete_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("packetDelete_attr1")),
          VarExpr::New ("packetDelete_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("packetDelete_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packetDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMPDELETE,
    strlist ("RLOC",
      "flowEntry_attr3",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epacketTempDelete_attr1",
      "epacketTempDelete_attr2",
      "epacketTempDelete_attr3",
      "epacketTempDelete_attr4",
      "epacketTempDelete_attr5",
      "epacketTempDelete_attr6",
      "epacketTempDelete_attr7",
      "epacketTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rs1_2_ecaAdd (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_2_ecaAdd triggered");

  Ptr<Tuple> result = epacketTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_rs1_2_ecaDel (Ptr<Tuple> epacketTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_2_ecaDel triggered");

  Ptr<Tuple> result = epacketTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("epacketTempDelete_attr1",
      "epacketTempDelete_attr6",
      "epacketTempDelete_attr7",
      "epacketTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_rs1_3_ecaAdd (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_3_ecaAdd triggered");

  Ptr<Tuple> result = epacketTemp;

  result = result->Project (
    EPACKET,
    strlist ("epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr1",
      "epacketTemp_attr2"),
    strlist ("epacket_attr1",
      "epacket_attr2",
      "epacket_attr3",
      "epacket_attr4",
      "epacket_attr5",
      "epacket_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rs1_3_ecaDel (Ptr<Tuple> epacketTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_3_ecaDel triggered");

  Ptr<Tuple> result = epacketTempDelete;

  result = result->Project (
    EPACKETDELETE,
    strlist ("epacketTempDelete_attr2",
      "epacketTempDelete_attr3",
      "epacketTempDelete_attr4",
      "epacketTempDelete_attr5",
      "epacketTempDelete_attr6",
      "epacketTempDelete_attr1",
      "epacketTempDelete_attr2"),
    strlist ("epacketDelete_attr1",
      "epacketDelete_attr2",
      "epacketDelete_attr3",
      "epacketDelete_attr4",
      "epacketDelete_attr5",
      "epacketDelete_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rs1_4_ecaAdd (Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_4_ecaAdd triggered");

  Ptr<Tuple> result = epacket;

  result = result->Project (
    PACKET,
    strlist ("epacket_attr1",
      "epacket_attr2",
      "epacket_attr3",
      "epacket_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Prov_rs1_4_ecaDel (Ptr<Tuple> epacketDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_4_ecaDel triggered");

  Ptr<Tuple> result = epacketDelete;

  result = result->Project (
    PACKET,
    strlist ("epacketDelete_attr1",
      "epacketDelete_attr2",
      "epacketDelete_attr3",
      "epacketDelete_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Prov_rs1_5_ecaAdd (Ptr<Tuple> epacket)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_5_ecaAdd triggered");

  Ptr<Tuple> result = epacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("epacket_attr1")),
            VarExpr::New ("epacket_attr2")),
          VarExpr::New ("epacket_attr3")),
        VarExpr::New ("epacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epacket_attr1",
      "VID",
      "epacket_attr5",
      "epacket_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_rs1_5_ecaDel (Ptr<Tuple> epacketDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_5_ecaDel triggered");

  Ptr<Tuple> result = epacketDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("epacketDelete_attr1")),
            VarExpr::New ("epacketDelete_attr2")),
          VarExpr::New ("epacketDelete_attr3")),
        VarExpr::New ("epacketDelete_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epacketDelete_attr1",
      "VID",
      "epacketDelete_attr5",
      "epacketDelete_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_rh1_1Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacket,
    strlist ("link_attr1"),
    strlist ("initPacket_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "link_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh1_1Eca0Del (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacket,
    strlist ("link_attr1"),
    strlist ("initPacket_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMPDELETE,
    strlist ("RLOC",
      "link_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epacketTempDelete_attr1",
      "epacketTempDelete_attr2",
      "epacketTempDelete_attr3",
      "epacketTempDelete_attr4",
      "epacketTempDelete_attr5",
      "epacketTempDelete_attr6",
      "epacketTempDelete_attr7",
      "epacketTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh1_1Eca3Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    link,
    strlist ("initPacket_attr1"),
    strlist ("link_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("link_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "link_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh1_1Eca3Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    link,
    strlist ("initPacket_attr1"),
    strlist ("link_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("link_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMPDELETE,
    strlist ("RLOC",
      "link_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epacketTempDelete_attr1",
      "epacketTempDelete_attr2",
      "epacketTempDelete_attr3",
      "epacketTempDelete_attr4",
      "epacketTempDelete_attr5",
      "epacketTempDelete_attr6",
      "epacketTempDelete_attr7",
      "epacketTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh2_1_ecaAdd (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_1_ecaAdd triggered");

  Ptr<Tuple> result = packet;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packet_attr1")),
            VarExpr::New ("packet_attr2")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("packet_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLOC",
      "packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh2_1_ecaDel (Ptr<Tuple> packetDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_1_ecaDel triggered");

  Ptr<Tuple> result = packetDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packetDelete_attr1")),
            VarExpr::New ("packetDelete_attr2")),
          VarExpr::New ("packetDelete_attr3")),
        VarExpr::New ("packetDelete_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packetDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packetDelete_attr3"),
      VarExpr::New ("packetDelete_attr1"))));

  result = result->Project (
    ERECVPACKETTEMPDELETE,
    strlist ("RLOC",
      "packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("erecvPacketTempDelete_attr1",
      "erecvPacketTempDelete_attr2",
      "erecvPacketTempDelete_attr3",
      "erecvPacketTempDelete_attr4",
      "erecvPacketTempDelete_attr5",
      "erecvPacketTempDelete_attr6",
      "erecvPacketTempDelete_attr7",
      "erecvPacketTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh2_2_ecaAdd (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_2_ecaAdd triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_rh2_2_ecaDel (Ptr<Tuple> erecvPacketTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_2_ecaDel triggered");

  Ptr<Tuple> result = erecvPacketTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("erecvPacketTempDelete_attr1",
      "erecvPacketTempDelete_attr6",
      "erecvPacketTempDelete_attr7",
      "erecvPacketTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_rh2_3_ecaAdd (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_3_ecaAdd triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result = result->Project (
    ERECVPACKET,
    strlist ("erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2"),
    strlist ("erecvPacket_attr1",
      "erecvPacket_attr2",
      "erecvPacket_attr3",
      "erecvPacket_attr4",
      "erecvPacket_attr5",
      "erecvPacket_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh2_3_ecaDel (Ptr<Tuple> erecvPacketTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_3_ecaDel triggered");

  Ptr<Tuple> result = erecvPacketTempDelete;

  result = result->Project (
    ERECVPACKETDELETE,
    strlist ("erecvPacketTempDelete_attr2",
      "erecvPacketTempDelete_attr3",
      "erecvPacketTempDelete_attr4",
      "erecvPacketTempDelete_attr5",
      "erecvPacketTempDelete_attr6",
      "erecvPacketTempDelete_attr1",
      "erecvPacketTempDelete_attr2"),
    strlist ("erecvPacketDelete_attr1",
      "erecvPacketDelete_attr2",
      "erecvPacketDelete_attr3",
      "erecvPacketDelete_attr4",
      "erecvPacketDelete_attr5",
      "erecvPacketDelete_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Prov_rh2_4_ecaAdd (Ptr<Tuple> erecvPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_4_ecaAdd triggered");

  Ptr<Tuple> result = erecvPacket;

  result = result->Project (
    RECVPACKET,
    strlist ("erecvPacket_attr1",
      "erecvPacket_attr2",
      "erecvPacket_attr3",
      "erecvPacket_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_rh2_4_ecaDel (Ptr<Tuple> erecvPacketDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_4_ecaDel triggered");

  Ptr<Tuple> result = erecvPacketDelete;

  result = result->Project (
    RECVPACKET,
    strlist ("erecvPacketDelete_attr1",
      "erecvPacketDelete_attr2",
      "erecvPacketDelete_attr3",
      "erecvPacketDelete_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_rh2_5_ecaAdd (Ptr<Tuple> erecvPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5_ecaAdd triggered");

  Ptr<Tuple> result = erecvPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("erecvPacket_attr1")),
            VarExpr::New ("erecvPacket_attr2")),
          VarExpr::New ("erecvPacket_attr3")),
        VarExpr::New ("erecvPacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("erecvPacket_attr1",
      "VID",
      "erecvPacket_attr5",
      "erecvPacket_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_rh2_5_ecaDel (Ptr<Tuple> erecvPacketDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5_ecaDel triggered");

  Ptr<Tuple> result = erecvPacketDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("erecvPacketDelete_attr1")),
            VarExpr::New ("erecvPacketDelete_attr2")),
          VarExpr::New ("erecvPacketDelete_attr3")),
        VarExpr::New ("erecvPacketDelete_attr4")))));

  result = result->Project (
    PROV,
    strlist ("erecvPacketDelete_attr1",
      "VID",
      "erecvPacketDelete_attr5",
      "erecvPacketDelete_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_edb_1Eca1Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("flowEntry_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_edb_1Eca1Del (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = flowEntry;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("flowEntry_attr1")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("flowEntry_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_edb_2Eca1Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("initPacket_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_edb_2Eca1Del (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = initPacket;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("initPacket_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Prov_edb_3Eca1Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("link_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormNoDevice::Prov_edb_3Eca1Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("link_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PktfwdNormNoDevice::Edb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("provQuery_attr3"),
      VarExpr::New ("provQuery_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr4",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr4"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Idb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = AggWrapList::New ()->Compute (result, provQuery, "prov_attr3");

  result = result->Project (
    PQLIST,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "list"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3"));

  Insert (result);
}

void
PktfwdNormNoDevice::Idb2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    PRESULTTMP,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr4",
      "provQuery_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormNoDevice::Idb3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PITERATE,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr3"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "RID"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    eRuleQuery,
    strlist ("prov_attr3", "prov_attr1"),
    strlist ("eRuleQuery_attr3", "eRuleQuery_attr1"));

  result = result->Project (
    RULEQUERY,
    strlist ("prov_attr4",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr1",
      "prov_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormNoDevice::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormNoDevice::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3"));

  Insert (result);
}

void
PktfwdNormNoDevice::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr4",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormNoDevice::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr3"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NNQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NNQID",
      "VID"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormNoDevice::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
PktfwdNormNoDevice::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("ruleExec_attr3"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

