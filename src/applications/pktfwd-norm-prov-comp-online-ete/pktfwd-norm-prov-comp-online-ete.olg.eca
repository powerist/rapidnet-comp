ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List := f_append(PID3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rs1_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rs1_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketCount(@RLOC, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule prov_rs1_4_eca ACTION_REMOTE_SEND<packetProv(@Next, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Hash := f_append(RID), NewTag := f_concat(Tag, Hash).
ECA Rule rs1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next).
ECA Rule rh100Eca0Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule rh101_eca ACTION_LOCAL_SEND<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, COUNT< * >)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi)>, equiHashTable(@Node, DstAdd, PIDequi).
ECA Rule rh102_eca ACTION_ADD<equiHashTable(@Node, DstAdd, PIDequi)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDcount)>, PIDcount == 0.
ECA Rule rh103_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDcount)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDcount != 0, PIDequiHash := f_append(PIDequi), PIDevHash := f_append(PIDev), PIDHash := f_concat(PIDequiHash, PIDevHash).
ECA Rule prov_rh1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDcount)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PIDcount == 0, PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Equilist := f_append(PIDequi), Evlist := f_append(PIDev), Tag := f_concat(Equilist, Evlist), PID2 := f_sha1((link+ Node)+ Next), List := f_append(PID2), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, DstAdd == Node, PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rh2_4_eca ACTION_REMOTE_SEND<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC, Tag)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>.
ECA Rule prov_rh2_5_eca ACTION_LOCAL_SEND<recvPacketTemp(@Node, SrcAdd, DstAdd, Data, Tag)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC, Tag)>, Hash := f_append(RID), NewTag := f_concat(Tag, Hash).
ECA Rule prov_rh2_6_eca ACTION_LOCAL_SEND<recvPacketDecomp(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev, Hashlist)> :- EVENT_RECV<recvPacketTemp(@Node, SrcAdd, DstAdd, Data, Tag)>, PIDequi := f_first(Tag), Remainlist := f_removeFirst(Tag), PIDev := f_first(Remainlist), Hashlist := f_removeFirst(Remainlist).
ECA Rule prov_rh2_7_eca ACTION_ADD<provHashTable(@Node, PIDequi, Hashlist)> :- EVENT_RECV<recvPacketDecomp(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev, Hashlist)>.
ECA Rule prov_rh2_8_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev)> :- EVENT_RECV<recvPacketDecomp(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev, Hashlist)>.
ECA Rule rh2_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, PIDequi := f_first(PIDHash), PIDevHash := f_removeFirst(PIDHash), PIDev := f_first(PIDevHash), DstAdd == Node.
ECA Rule rh3Eca0Ins ACTION_ADD<recvAuxPkt(@Node, PID, PIDequi, PIDev)> :- EVENT_INSERT<recvPacket(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule rh3Eca0Del ACTION_DELETE<recvAuxPkt(@Node, PID, PIDequi, PIDev)> :- EVENT_DELETE<recvPacket(@Node, SrcAdd, DstAdd, Data, PIDequi, PIDev)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
