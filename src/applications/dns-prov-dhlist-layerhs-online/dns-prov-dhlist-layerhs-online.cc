/* A RapidNet application. Generated by RapidNet compiler. */

#include "dns-prov-dhlist-layerhs-online.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::dnsprovdhlistlayerhsonline;

const string DnsProvDhlistLayerhsOnline::ADDRESS_RECORD = "address_record";
const string DnsProvDhlistLayerhsOnline::EREQUESTCOUNT = "eRequestCount";
const string DnsProvDhlistLayerhsOnline::EREQUESTTEMP = "eRequestTemp";
const string DnsProvDhlistLayerhsOnline::EQUIHASHTABLE = "equiHashTable";
const string DnsProvDhlistLayerhsOnline::ERESULTSTEMP = "eresultsTemp";
const string DnsProvDhlistLayerhsOnline::NAME_SERVER = "name_server";
const string DnsProvDhlistLayerhsOnline::PROGRAMID = "programID";
const string DnsProvDhlistLayerhsOnline::PROVHASHTABLE = "provHashTable";
const string DnsProvDhlistLayerhsOnline::PROVLINK = "provLink";
const string DnsProvDhlistLayerhsOnline::REQUEST = "request";
const string DnsProvDhlistLayerhsOnline::REQUESTPROV = "requestProv";
const string DnsProvDhlistLayerhsOnline::RESULTS = "results";
const string DnsProvDhlistLayerhsOnline::RESULTSPROV = "resultsProv";
const string DnsProvDhlistLayerhsOnline::RESULTSQRY = "resultsQry";
const string DnsProvDhlistLayerhsOnline::RH2RESULTSSEND = "rh2resultssend";
const string DnsProvDhlistLayerhsOnline::RHO3RESULTSQRYSEND = "rho3resultsQrysend";
const string DnsProvDhlistLayerhsOnline::RULEEXEC = "ruleExec";
const string DnsProvDhlistLayerhsOnline::URL = "url";
const string DnsProvDhlistLayerhsOnline::URLCOUNT = "urlCount";
const string DnsProvDhlistLayerhsOnline::URLHASH = "urlHash";

NS_LOG_COMPONENT_DEFINE ("DnsProvDhlistLayerhsOnline");
NS_OBJECT_ENSURE_REGISTERED (DnsProvDhlistLayerhsOnline);

TypeId
DnsProvDhlistLayerhsOnline::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::dnsprovdhlistlayerhsonline::DnsProvDhlistLayerhsOnline")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<DnsProvDhlistLayerhsOnline> ()
    ;
  return tid;
}

DnsProvDhlistLayerhsOnline::DnsProvDhlistLayerhsOnline()
{
  NS_LOG_FUNCTION_NOARGS ();
}

DnsProvDhlistLayerhsOnline::~DnsProvDhlistLayerhsOnline()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
DnsProvDhlistLayerhsOnline::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
DnsProvDhlistLayerhsOnline::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("DnsProvDhlistLayerhsOnline Application Started");
}

void
DnsProvDhlistLayerhsOnline::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("DnsProvDhlistLayerhsOnline Application Stopped");
}

void
DnsProvDhlistLayerhsOnline::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ADDRESS_RECORD, attrdeflist (
    attrdef ("address_record_attr1", IPV4),
    attrdef ("address_record_attr2", STR),
    attrdef ("address_record_attr3", IPV4)));

  AddRelationWithKeys (EQUIHASHTABLE, attrdeflist (
    attrdef ("equiHashTable_attr2", STR)));

  AddRelationWithKeys (NAME_SERVER, attrdeflist (
    attrdef ("name_server_attr1", IPV4),
    attrdef ("name_server_attr2", STR),
    attrdef ("name_server_attr3", STR)));

  AddRelationWithKeys (PROGRAMID, attrdeflist (
    attrdef ("programID_attr2", STR)));

  AddRelationWithKeys (PROVHASHTABLE, attrdeflist (
    attrdef ("provHashTable_attr3", IPV4)));

  AddRelationWithKeys (PROVLINK, attrdeflist (
    attrdef ("provLink_attr2", STR),
    attrdef ("provLink_attr3", ID),
    attrdef ("provLink_attr4", ID),
    attrdef ("provLink_attr5", IPV4),
    attrdef ("provLink_attr6", ID)));

  AddRelationWithKeys (RESULTS, attrdeflist (
    attrdef ("results_attr1", IPV4),
    attrdef ("results_attr2", STR),
    attrdef ("results_attr3", IPV4),
    attrdef ("results_attr4", INT32)));

  AddRelationWithKeys (RESULTSQRY, attrdeflist (
    attrdef ("resultsQry_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr4", LIST)));

  AddRelationWithKeys (URL, attrdeflist (
    attrdef ("url_attr1", IPV4),
    attrdef ("url_attr2", STR),
    attrdef ("url_attr3", IPV4),
    attrdef ("url_attr4", INT32)));

}

void
DnsProvDhlistLayerhsOnline::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, REQUESTPROV))
    {
      Prov_r1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTCOUNT))
    {
      Prov_r1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r1_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      R1_eca (tuple);
    }
  if (IsInsertEvent (tuple, URL))
    {
      Prov_ri1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PROGRAMID))
    {
      Prov_ri1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, URLHASH))
    {
      Prov_ri2_eca (tuple);
    }
  if (IsRecvEvent (tuple, URLCOUNT))
    {
      Prov_ri3_eca (tuple);
    }
  if (IsRecvEvent (tuple, URLCOUNT))
    {
      R103_eca (tuple);
    }
  if (IsRecvEvent (tuple, URLCOUNT))
    {
      Prov_r2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUESTPROV))
    {
      Prov_r3_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTSTEMP))
    {
      Prov_r3_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTSTEMP))
    {
      Prov_r3_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTSTEMP))
    {
      Prov_r3_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RESULTSPROV))
    {
      Prov_r3_6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RESULTSPROV))
    {
      Ro1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RESULTSPROV))
    {
      Ro2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RH2RESULTSSEND))
    {
      Rh2ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      Rh2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RHO3RESULTSQRYSEND))
    {
      Rho3ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      Rho3_eca (tuple);
    }
}

void
DnsProvDhlistLayerhsOnline::Prov_r1_1_eca (Ptr<Tuple> requestProv)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    requestProv,
    strlist ("name_server_attr1"),
    strlist ("requestProv_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "requestProv_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List1",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("requestProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("requestProv_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("requestProv_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "requestProv_attr2",
      "requestProv_attr3",
      "requestProv_attr4",
      "RID",
      "R",
      "List",
      "requestProv_attr5",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r1_2_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eRequestTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eRequestTemp_attr8", "eRequestTemp_attr7", "eRequestTemp_attr6", "eRequestTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eRequestTemp);

  result = result->Project (
    EREQUESTCOUNT,
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "count"),
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4",
      "eRequestCount_attr5"));

  SendLocal (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r1_3_eca (Ptr<Tuple> eRequestCount)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_eca triggered");

  Ptr<Tuple> result = eRequestCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eRequestCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r1_4_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_eca triggered");

  Ptr<Tuple> result = eRequestTemp;

  result->Assign (Assignor::New ("Preloc",
    FFirst::New (
      VarExpr::New ("eRequestTemp_attr9"))));

  result->Assign (Assignor::New ("TempTag1",
    FRemoveFirst::New (
      VarExpr::New ("eRequestTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("TempTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("PreLhash",
    FFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("TempTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("TempTag3"))));

  result->Assign (Assignor::New ("CurLhash",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("PreLhash"),
        VarExpr::New ("eRequestTemp_attr6")))));

  result = result->Project (
    PROVLINK,
    strlist ("eRequestTemp_attr1",
      "ProgID",
      "eRequestTemp_attr6",
      "CurLhash",
      "Preloc",
      "PreRID",
      "PreLhash"),
    strlist ("provLink_attr1",
      "provLink_attr2",
      "provLink_attr3",
      "provLink_attr4",
      "provLink_attr5",
      "provLink_attr6",
      "provLink_attr7"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r1_5_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_eca triggered");

  Ptr<Tuple> result = eRequestTemp;

  result->Assign (Assignor::New ("TempNewTag1",
    FRemoveFirst::New (
      VarExpr::New ("eRequestTemp_attr9"))));

  result->Assign (Assignor::New ("TempNewTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag1"))));

  result->Assign (Assignor::New ("PreLhash",
    FFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("CurLhash",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("PreLhash"),
        VarExpr::New ("eRequestTemp_attr6")))));

  result->Assign (Assignor::New ("CurLhashlist",
    FAppend::New (
      VarExpr::New ("CurLhash"))));

  result->Assign (Assignor::New ("TempNewTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("eRequestTemp_attr6"))));

  result->Assign (Assignor::New ("Loclist",
    FAppend::New (
      VarExpr::New ("eRequestTemp_attr1"))));

  result->Assign (Assignor::New ("TempNewTag4",
    FConcat::New (
      VarExpr::New ("CurLhashlist"),
      VarExpr::New ("TempNewTag3"))));

  result->Assign (Assignor::New ("TempNewTag5",
    FConcat::New (
      VarExpr::New ("RIDlist"),
      VarExpr::New ("TempNewTag4"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("Loclist"),
      VarExpr::New ("TempNewTag5"))));

  result = result->Project (
    REQUESTPROV,
    strlist ("eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "NewTag",
      "eRequestTemp_attr2"),
    strlist ("requestProv_attr1",
      "requestProv_attr2",
      "requestProv_attr3",
      "requestProv_attr4",
      "requestProv_attr5",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::R1_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("R1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    REQUEST,
    strlist ("address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5",
      "address_record_attr3"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_ri1Eca0Ins (Ptr<Tuple> url)
{
  RAPIDNET_LOG_INFO ("Prov_ri1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROGRAMID)->Join (
    url,
    strlist ("programID_attr2", "programID_attr1"),
    strlist ("url_attr2", "url_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("url_attr1")),
        VarExpr::New ("url_attr2")))));

  result = result->Project (
    URLHASH,
    strlist ("url_attr1",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "PIDequi",
      "programID_attr3"),
    strlist ("urlHash_attr1",
      "urlHash_attr2",
      "urlHash_attr3",
      "urlHash_attr4",
      "urlHash_attr5",
      "urlHash_attr6"));

  SendLocal (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_ri1Eca1Ins (Ptr<Tuple> programID)
{
  RAPIDNET_LOG_INFO ("Prov_ri1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (URL)->Join (
    programID,
    strlist ("url_attr2", "url_attr1"),
    strlist ("programID_attr2", "programID_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("programID_attr1")),
        VarExpr::New ("programID_attr2")))));

  result = result->Project (
    URLHASH,
    strlist ("programID_attr1",
      "programID_attr2",
      "url_attr3",
      "url_attr4",
      "PIDequi",
      "programID_attr3"),
    strlist ("urlHash_attr1",
      "urlHash_attr2",
      "urlHash_attr3",
      "urlHash_attr4",
      "urlHash_attr5",
      "urlHash_attr6"));

  SendLocal (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_ri2_eca (Ptr<Tuple> urlHash)
{
  RAPIDNET_LOG_INFO ("Prov_ri2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EQUIHASHTABLE)->Join (
    urlHash,
    strlist ("equiHashTable_attr3", "equiHashTable_attr2", "equiHashTable_attr1"),
    strlist ("urlHash_attr5", "urlHash_attr2", "urlHash_attr1"));

  result = AggWrapCount::New ()->Compute (result, urlHash);

  result = result->Project (
    URLCOUNT,
    strlist ("urlHash_attr1",
      "urlHash_attr2",
      "urlHash_attr3",
      "urlHash_attr4",
      "urlHash_attr5",
      "urlHash_attr6",
      "count"),
    strlist ("urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr3",
      "urlCount_attr4",
      "urlCount_attr5",
      "urlCount_attr6",
      "urlCount_attr7"));

  SendLocal (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_ri3_eca (Ptr<Tuple> urlCount)
{
  RAPIDNET_LOG_INFO ("Prov_ri3_eca triggered");

  Ptr<Tuple> result = urlCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("urlCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EQUIHASHTABLE,
    strlist ("urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr5"),
    strlist ("equiHashTable_attr1",
      "equiHashTable_attr2",
      "equiHashTable_attr3"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::R103_eca (Ptr<Tuple> urlCount)
{
  RAPIDNET_LOG_INFO ("R103_eca triggered");

  Ptr<Tuple> result = urlCount;

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("urlCount_attr1")),
            VarExpr::New ("urlCount_attr2")),
          VarExpr::New ("urlCount_attr3")),
        VarExpr::New ("urlCount_attr4")))));

  result->Assign (Assignor::New ("PIDequiHash",
    FAppend::New (
      VarExpr::New ("urlCount_attr5"))));

  result->Assign (Assignor::New ("PIDevHash",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("ProgIDlist",
    FConcat::New (
      VarExpr::New ("PIDequiHash"),
      VarExpr::New ("PIDevHash"))));

  result->Assign (Assignor::New ("PIDHash1",
    FConcat::New (
      VarExpr::New ("PIDequiHash"),
      VarExpr::New ("PIDevHash"))));

  result->Assign (Assignor::New ("PIDHash",
    FConcat::New (
      VarExpr::New ("PIDHash1"),
      VarExpr::New ("ProgIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("urlCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    REQUEST,
    strlist ("urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr3",
      "urlCount_attr4",
      "PIDHash"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5"));

  SendLocal (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r2_1_eca (Ptr<Tuple> urlCount)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1_eca triggered");

  Ptr<Tuple> result = urlCount;

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("urlCount_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Equilist",
    FAppend::New (
      VarExpr::New ("urlCount_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("urlCount_attr1")),
            VarExpr::New ("urlCount_attr2")),
          VarExpr::New ("urlCount_attr3")),
        VarExpr::New ("urlCount_attr4")))));

  result->Assign (Assignor::New ("Evlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("ProgIDlist",
    FAppend::New (
      VarExpr::New ("urlCount_attr6"))));

  result->Assign (Assignor::New ("InitLhashlist",
    FAppend::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("InitProvNode",
    VarExpr::New ("RLOC")));

  result->Assign (Assignor::New ("InitProvNodelist",
    FAppend::New (
      VarExpr::New ("InitProvNode"))));

  result->Assign (Assignor::New ("InitProvHash",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("InitProvHashlist",
    FAppend::New (
      VarExpr::New ("InitProvHash"))));

  result->Assign (Assignor::New ("TempTag1",
    FConcat::New (
      VarExpr::New ("InitProvNodelist"),
      VarExpr::New ("InitProvHashlist"))));

  result->Assign (Assignor::New ("TempTag2",
    FConcat::New (
      VarExpr::New ("TempTag1"),
      VarExpr::New ("InitLhashlist"))));

  result->Assign (Assignor::New ("TempTag3",
    FConcat::New (
      VarExpr::New ("TempTag2"),
      VarExpr::New ("ProgIDlist"))));

  result->Assign (Assignor::New ("TempTag4",
    FConcat::New (
      VarExpr::New ("TempTag3"),
      VarExpr::New ("Evlist"))));

  result->Assign (Assignor::New ("Tag",
    FConcat::New (
      VarExpr::New ("TempTag4"),
      VarExpr::New ("Equilist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("urlCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "urlCount_attr1",
      "urlCount_attr2",
      "urlCount_attr3",
      "urlCount_attr4",
      "RID",
      "R",
      "List",
      "Tag",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r3_1_eca (Ptr<Tuple> requestProv)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    requestProv,
    strlist ("name_server_attr1"),
    strlist ("requestProv_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "requestProv_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("request")),
              VarExpr::New ("requestProv_attr1")),
            VarExpr::New ("requestProv_attr2")),
          VarExpr::New ("requestProv_attr3")),
        VarExpr::New ("requestProv_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("requestProv_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("requestProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("R"),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("requestProv_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("requestProv_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    ERESULTSTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "requestProv_attr2",
      "requestProv_attr3",
      "requestProv_attr4",
      "RID",
      "R",
      "List",
      "requestProv_attr5",
      "RLOC"),
    strlist ("eresultsTemp_attr1",
      "eresultsTemp_attr2",
      "eresultsTemp_attr3",
      "eresultsTemp_attr4",
      "eresultsTemp_attr5",
      "eresultsTemp_attr6",
      "eresultsTemp_attr7",
      "eresultsTemp_attr8",
      "eresultsTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r3_2_eca (Ptr<Tuple> eresultsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    eresultsTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("eresultsTemp_attr8", "eresultsTemp_attr7", "eresultsTemp_attr6", "eresultsTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, eresultsTemp);

  result = result->Project (
    EREQUESTCOUNT,
    strlist ("eresultsTemp_attr1",
      "eresultsTemp_attr6",
      "eresultsTemp_attr7",
      "eresultsTemp_attr8",
      "count"),
    strlist ("eRequestCount_attr1",
      "eRequestCount_attr2",
      "eRequestCount_attr3",
      "eRequestCount_attr4",
      "eRequestCount_attr5"));

  SendLocal (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r3_4_eca (Ptr<Tuple> eresultsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_eca triggered");

  Ptr<Tuple> result = eresultsTemp;

  result->Assign (Assignor::New ("Preloc",
    FFirst::New (
      VarExpr::New ("eresultsTemp_attr9"))));

  result->Assign (Assignor::New ("TempTag1",
    FRemoveFirst::New (
      VarExpr::New ("eresultsTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("TempTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("PreLhash",
    FFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("TempTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempTag2"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("TempTag3"))));

  result->Assign (Assignor::New ("CurLhash",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("PreLhash"),
        VarExpr::New ("eresultsTemp_attr6")))));

  result = result->Project (
    PROVLINK,
    strlist ("eresultsTemp_attr1",
      "ProgID",
      "eresultsTemp_attr6",
      "CurLhash",
      "Preloc",
      "PreRID",
      "PreLhash"),
    strlist ("provLink_attr1",
      "provLink_attr2",
      "provLink_attr3",
      "provLink_attr4",
      "provLink_attr5",
      "provLink_attr6",
      "provLink_attr7"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r3_5_eca (Ptr<Tuple> eresultsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_eca triggered");

  Ptr<Tuple> result = eresultsTemp;

  result->Assign (Assignor::New ("TempNewTag1",
    FRemoveFirst::New (
      VarExpr::New ("eresultsTemp_attr9"))));

  result->Assign (Assignor::New ("TempNewTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag1"))));

  result->Assign (Assignor::New ("PreLhash",
    FFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("CurLhash",
    FSha1::New (
      Operation::New (RN_PLUS,
        VarExpr::New ("PreLhash"),
        VarExpr::New ("eresultsTemp_attr6")))));

  result->Assign (Assignor::New ("CurLhashlist",
    FAppend::New (
      VarExpr::New ("CurLhash"))));

  result->Assign (Assignor::New ("TempNewTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("eresultsTemp_attr6"))));

  result->Assign (Assignor::New ("Loclist",
    FAppend::New (
      VarExpr::New ("eresultsTemp_attr1"))));

  result->Assign (Assignor::New ("TempNewTag4",
    FConcat::New (
      VarExpr::New ("CurLhashlist"),
      VarExpr::New ("TempNewTag3"))));

  result->Assign (Assignor::New ("TempNewTag5",
    FConcat::New (
      VarExpr::New ("RIDlist"),
      VarExpr::New ("TempNewTag4"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("Loclist"),
      VarExpr::New ("TempNewTag5"))));

  result = result->Project (
    RESULTSPROV,
    strlist ("eresultsTemp_attr2",
      "eresultsTemp_attr3",
      "eresultsTemp_attr4",
      "eresultsTemp_attr5",
      "NewTag",
      "eresultsTemp_attr2"),
    strlist ("resultsProv_attr1",
      "resultsProv_attr2",
      "resultsProv_attr3",
      "resultsProv_attr4",
      "resultsProv_attr5",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::Prov_r3_6_eca (Ptr<Tuple> resultsProv)
{
  RAPIDNET_LOG_INFO ("Prov_r3_6_eca triggered");

  Ptr<Tuple> result = resultsProv;

  result = result->Project (
    RESULTS,
    strlist ("resultsProv_attr1",
      "resultsProv_attr2",
      "resultsProv_attr3",
      "resultsProv_attr4"),
    strlist ("results_attr1",
      "results_attr2",
      "results_attr3",
      "results_attr4"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Ro1_eca (Ptr<Tuple> resultsProv)
{
  RAPIDNET_LOG_INFO ("Ro1_eca triggered");

  Ptr<Tuple> result = resultsProv;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("resultsProv_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("resultsProv_attr5"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("PreLhash",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("EvHash",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("EqHash",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result->Assign (Assignor::New ("ProvID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("ProgID")),
        VarExpr::New ("EqHash")))));

  result = result->Project (
    PROVHASHTABLE,
    strlist ("resultsProv_attr1",
      "ProvID",
      "PreLoc",
      "PreRID",
      "PreLhash"),
    strlist ("provHashTable_attr1",
      "provHashTable_attr2",
      "provHashTable_attr3",
      "provHashTable_attr4",
      "provHashTable_attr5"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Ro2_eca (Ptr<Tuple> resultsProv)
{
  RAPIDNET_LOG_INFO ("Ro2_eca triggered");

  Ptr<Tuple> result = resultsProv;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("results")),
              VarExpr::New ("resultsProv_attr1")),
            VarExpr::New ("resultsProv_attr2")),
          VarExpr::New ("resultsProv_attr3")),
        VarExpr::New ("resultsProv_attr4")))));

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("resultsProv_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("resultsProv_attr5"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("PreLhash",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("EvHash",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("EqHash",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result->Assign (Assignor::New ("ProvID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("ProgID"),
          ValueExpr::New (StrValue::New (""))),
        VarExpr::New ("EqHash")))));

  result = result->Project (
    RESULTSQRY,
    strlist ("resultsProv_attr1",
      "PID",
      "ProvID",
      "EvHash"),
    strlist ("resultsQry_attr1",
      "resultsQry_attr2",
      "resultsQry_attr3",
      "resultsQry_attr4"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Rh2ECAMat (Ptr<Tuple> rh2resultssend)
{
  RAPIDNET_LOG_INFO ("Rh2ECAMat triggered");

  Ptr<Tuple> result = rh2resultssend;

  result = result->Project (
    RESULTS,
    strlist ("rh2resultssend_attr1",
      "rh2resultssend_attr2",
      "rh2resultssend_attr3",
      "rh2resultssend_attr4"),
    strlist ("results_attr1",
      "results_attr2",
      "results_attr3",
      "results_attr4"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Rh2_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("Rh2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    RH2RESULTSSEND,
    strlist ("address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "address_record_attr3"),
    strlist ("rh2resultssend_attr1",
      "rh2resultssend_attr2",
      "rh2resultssend_attr3",
      "rh2resultssend_attr4",
      RN_DEST));

  Send (result);
}

void
DnsProvDhlistLayerhsOnline::Rho3ECAMat (Ptr<Tuple> rho3resultsQrysend)
{
  RAPIDNET_LOG_INFO ("Rho3ECAMat triggered");

  Ptr<Tuple> result = rho3resultsQrysend;

  result = result->Project (
    RESULTSQRY,
    strlist ("rho3resultsQrysend_attr1",
      "rho3resultsQrysend_attr2",
      "rho3resultsQrysend_attr3",
      "rho3resultsQrysend_attr4"),
    strlist ("resultsQry_attr1",
      "resultsQry_attr2",
      "resultsQry_attr3",
      "resultsQry_attr4"));

  Insert (result);
}

void
DnsProvDhlistLayerhsOnline::Rho3_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("Rho3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("results")),
              VarExpr::New ("address_record_attr3")),
            VarExpr::New ("request_attr2")),
          VarExpr::New ("request_attr3")),
        VarExpr::New ("request_attr4")))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("PIDHash"))));

  result->Assign (Assignor::New ("PIDHash1",
    FRemoveFirst::New (
      VarExpr::New ("PIDHash"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("PIDHash1"))));

  result->Assign (Assignor::New ("PIDHash2",
    FRemoveFirst::New (
      VarExpr::New ("PIDHash1"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("PIDHash2"))));

  result->Assign (Assignor::New ("ProvID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("ProgID"),
          ValueExpr::New (StrValue::New (""))),
        VarExpr::New ("PIDequi")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    RHO3RESULTSQRYSEND,
    strlist ("address_record_attr3",
      "PID",
      "ProvID",
      "PIDev",
      "address_record_attr3"),
    strlist ("rho3resultsQrysend_attr1",
      "rho3resultsQrysend_attr2",
      "rho3resultsQrysend_attr3",
      "rho3resultsQrysend_attr4",
      RN_DEST));

  Send (result);
}

