/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-norm-dist-hlist-rmitm.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdnormdisthlistrmitm;

const string PktfwdNormDistHlistRmitm::EPACKETTEMP = "epacketTemp";
const string PktfwdNormDistHlistRmitm::ERECVPACKETTEMP = "erecvPacketTemp";
const string PktfwdNormDistHlistRmitm::FLOWENTRY = "flowEntry";
const string PktfwdNormDistHlistRmitm::INITPACKET = "initPacket";
const string PktfwdNormDistHlistRmitm::LINK = "link";
const string PktfwdNormDistHlistRmitm::PACKET = "packet";
const string PktfwdNormDistHlistRmitm::PROV = "prov";
const string PktfwdNormDistHlistRmitm::PROV_RH2_3RECVPACKETSEND = "prov_rh2_3recvPacketsend";
const string PktfwdNormDistHlistRmitm::RECVPACKET = "recvPacket";
const string PktfwdNormDistHlistRmitm::RULEEXEC = "ruleExec";

NS_LOG_COMPONENT_DEFINE ("PktfwdNormDistHlistRmitm");
NS_OBJECT_ENSURE_REGISTERED (PktfwdNormDistHlistRmitm);

TypeId
PktfwdNormDistHlistRmitm::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdnormdisthlistrmitm::PktfwdNormDistHlistRmitm")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdNormDistHlistRmitm> ()
    ;
  return tid;
}

PktfwdNormDistHlistRmitm::PktfwdNormDistHlistRmitm()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdNormDistHlistRmitm::~PktfwdNormDistHlistRmitm()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdNormDistHlistRmitm::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdNormDistHlistRmitm::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormDistHlistRmitm Application Started");
}

void
PktfwdNormDistHlistRmitm::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormDistHlistRmitm Application Stopped");
}

void
PktfwdNormDistHlistRmitm::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", IPV4),
    attrdef ("prov_attr4", ID)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr2", ID),
    attrdef ("ruleExec_attr5", IPV4),
    attrdef ("ruleExec_attr6", ID)));

}

void
PktfwdNormDistHlistRmitm::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, PACKET))
    {
      Prov_rs1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_3_eca (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_rh1_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Prov_rh1_1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_rh1_1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Prov_rh2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROV_RH2_3RECVPACKETSEND))
    {
      Prov_rh2_3ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_3_eca (tuple);
    }
  if (IsInsertEvent (tuple, RECVPACKET))
    {
      Prov_rh2_5Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECVPACKET))
    {
      Prov_rh2_5Eca0Del (tuple);
    }
}

void
PktfwdNormDistHlistRmitm::Prov_rs1_1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packet,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packet_attr1"));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packet_attr1")),
            VarExpr::New ("packet_attr2")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("packet_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("packet_attr1")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("packet_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("packet_attr5"))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("packet_attr6"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rs1_2_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_2_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RULEEXEC,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "PreLoc",
      "PreRID"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5",
      "ruleExec_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rs1_3_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_3_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result = result->Project (
    PACKET,
    strlist ("epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      "packet_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh1_1Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    initPacket,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("initPacket_attr3", "initPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "initPacket_attr1"));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacket_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("initPacket_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh1_1Eca1Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    flowEntry,
    strlist ("initPacket_attr3", "initPacket_attr1"),
    strlist ("flowEntry_attr2", "flowEntry_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "flowEntry_attr1"));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("flowEntry_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("flowEntry_attr2")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("flowEntry_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("flowEntry_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "initPacket_attr2",
      "flowEntry_attr2",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh1_1Eca2Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    link,
    strlist ("initPacket_attr1"),
    strlist ("link_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("initPacket_attr3", "link_attr2", "link_attr1"));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("link_attr1")),
            VarExpr::New ("initPacket_attr2")),
          VarExpr::New ("initPacket_attr3")),
        VarExpr::New ("initPacket_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("link_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "link_attr2",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh2_1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_1_eca triggered");

  Ptr<Tuple> result = packet;

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packet_attr1")),
            VarExpr::New ("packet_attr2")),
          VarExpr::New ("packet_attr3")),
        VarExpr::New ("packet_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packet_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("packet_attr5"))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("packet_attr6"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLOC",
      "packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "erecvPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh2_2_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_2_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RULEEXEC,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "PreLoc",
      "PreRID"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5",
      "ruleExec_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh2_3ECAMat (Ptr<Tuple> prov_rh2_3recvPacketsend)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_3ECAMat triggered");

  Ptr<Tuple> result = prov_rh2_3recvPacketsend;

  result = result->Project (
    RECVPACKET,
    strlist ("prov_rh2_3recvPacketsend_attr1",
      "prov_rh2_3recvPacketsend_attr2",
      "prov_rh2_3recvPacketsend_attr3",
      "prov_rh2_3recvPacketsend_attr4",
      "prov_rh2_3recvPacketsend_attr5",
      "prov_rh2_3recvPacketsend_attr6"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4",
      "recvPacket_attr5",
      "recvPacket_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh2_3_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_3_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result = result->Project (
    PROV_RH2_3RECVPACKETSEND,
    strlist ("erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2"),
    strlist ("prov_rh2_3recvPacketsend_attr1",
      "prov_rh2_3recvPacketsend_attr2",
      "prov_rh2_3recvPacketsend_attr3",
      "prov_rh2_3recvPacketsend_attr4",
      "prov_rh2_3recvPacketsend_attr5",
      "prov_rh2_3recvPacketsend_attr6",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh2_5Eca0Ins (Ptr<Tuple> recvPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5Eca0Ins triggered");

  Ptr<Tuple> result = recvPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacket_attr1")),
            VarExpr::New ("recvPacket_attr2")),
          VarExpr::New ("recvPacket_attr3")),
        VarExpr::New ("recvPacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("recvPacket_attr1",
      "VID",
      "recvPacket_attr6",
      "recvPacket_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistRmitm::Prov_rh2_5Eca0Del (Ptr<Tuple> recvPacket)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5Eca0Del triggered");

  Ptr<Tuple> result = recvPacket;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacket_attr1")),
            VarExpr::New ("recvPacket_attr2")),
          VarExpr::New ("recvPacket_attr3")),
        VarExpr::New ("recvPacket_attr4")))));

  result = result->Project (
    PROV,
    strlist ("recvPacket_attr1",
      "VID",
      "recvPacket_attr6",
      "recvPacket_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

