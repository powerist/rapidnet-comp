/* A RapidNet application. Generated by RapidNet compiler. */

#include "dns-prov-dist-hlist-rmitm.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::dnsprovdisthlistrmitm;

const string DnsProvDistHlistRmitm::ADDRESS_RECORD = "address_record";
const string DnsProvDistHlistRmitm::EREQUESTTEMP = "eRequestTemp";
const string DnsProvDistHlistRmitm::ERESULTTEMP = "eResultTemp";
const string DnsProvDistHlistRmitm::NAME_SERVER = "name_server";
const string DnsProvDistHlistRmitm::PROV = "prov";
const string DnsProvDistHlistRmitm::PROV_R3_3RESULTSSEND = "prov_r3_3resultssend";
const string DnsProvDistHlistRmitm::REQUEST = "request";
const string DnsProvDistHlistRmitm::RESULTS = "results";
const string DnsProvDistHlistRmitm::RULEEXEC = "ruleExec";
const string DnsProvDistHlistRmitm::URL = "url";

NS_LOG_COMPONENT_DEFINE ("DnsProvDistHlistRmitm");
NS_OBJECT_ENSURE_REGISTERED (DnsProvDistHlistRmitm);

TypeId
DnsProvDistHlistRmitm::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::dnsprovdisthlistrmitm::DnsProvDistHlistRmitm")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<DnsProvDistHlistRmitm> ()
    ;
  return tid;
}

DnsProvDistHlistRmitm::DnsProvDistHlistRmitm()
{
  NS_LOG_FUNCTION_NOARGS ();
}

DnsProvDistHlistRmitm::~DnsProvDistHlistRmitm()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
DnsProvDistHlistRmitm::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
DnsProvDistHlistRmitm::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("DnsProvDistHlistRmitm Application Started");
}

void
DnsProvDistHlistRmitm::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("DnsProvDistHlistRmitm Application Stopped");
}

void
DnsProvDistHlistRmitm::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ADDRESS_RECORD, attrdeflist (
    attrdef ("address_record_attr1", IPV4),
    attrdef ("address_record_attr2", STR),
    attrdef ("address_record_attr3", IPV4)));

  AddRelationWithKeys (NAME_SERVER, attrdeflist (
    attrdef ("name_server_attr1", IPV4),
    attrdef ("name_server_attr2", STR),
    attrdef ("name_server_attr3", STR)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID),
    attrdef ("prov_attr4", IPV4)));

  AddRelationWithKeys (RESULTS, attrdeflist (
    attrdef ("results_attr1", IPV4),
    attrdef ("results_attr2", STR),
    attrdef ("results_attr3", IPV4),
    attrdef ("results_attr4", INT32)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr4", LIST)));

  AddRelationWithKeys (URL, attrdeflist (
    attrdef ("url_attr1", IPV4),
    attrdef ("url_attr2", STR),
    attrdef ("url_attr3", IPV4),
    attrdef ("url_attr4", INT32)));

}

void
DnsProvDistHlistRmitm::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, URL))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, NAME_SERVER))
    {
      Prov_r1_1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, ADDRESS_RECORD))
    {
      Prov_r1_1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      Prov_r2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EREQUESTTEMP))
    {
      Prov_r2_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, REQUEST))
    {
      Prov_r3_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMP))
    {
      Prov_r3_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROV_R3_3RESULTSSEND))
    {
      Prov_r3_3ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMP))
    {
      Prov_r3_3_eca (tuple);
    }
  if (IsInsertEvent (tuple, RESULTS))
    {
      Prov_r3_4Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RESULTS))
    {
      Prov_r3_4Eca0Del (tuple);
    }
}

void
DnsProvDistHlistRmitm::Prov_r1_1Eca0Ins (Ptr<Tuple> url)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    url,
    strlist ("name_server_attr1"),
    strlist ("url_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "url_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("url_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("url_attr1")),
            VarExpr::New ("url_attr2")),
          VarExpr::New ("url_attr3")),
        VarExpr::New ("url_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("url_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("url_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("url_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "url_attr1",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r1_1Eca1Ins (Ptr<Tuple> name_server)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (URL)->Join (
    name_server,
    strlist ("url_attr1"),
    strlist ("name_server_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "name_server_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("name_server_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("name_server_attr1")),
            VarExpr::New ("url_attr2")),
          VarExpr::New ("url_attr3")),
        VarExpr::New ("url_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("name_server_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("url_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("url_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "name_server_attr1",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r1_1Eca2Ins (Ptr<Tuple> address_record)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (URL)->Join (
    address_record,
    strlist ("url_attr1"),
    strlist ("address_record_attr1"));

  result = GetRelation (NAME_SERVER)->Join (
    result,
    strlist ("name_server_attr3", "name_server_attr1"),
    strlist ("address_record_attr2", "address_record_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("address_record_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("url")),
              VarExpr::New ("address_record_attr1")),
            VarExpr::New ("url_attr2")),
          VarExpr::New ("url_attr3")),
        VarExpr::New ("url_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("PreLoc",
    VarExpr::New ("address_record_attr1")));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("PreLoc"))));

  result->Assign (Assignor::New ("PreRID",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("PreRID"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("url_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("url_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "address_record_attr1",
      "url_attr2",
      "url_attr3",
      "url_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r2_1_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result->Assign (Assignor::New ("List",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("request")),
              VarExpr::New ("request_attr1")),
            VarExpr::New ("request_attr2")),
          VarExpr::New ("request_attr3")),
        VarExpr::New ("request_attr4")))));

  result->Assign (Assignor::New ("List1",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("request_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("request_attr5"))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("request_attr6"))));

  result->Assign (Assignor::New ("PreInfoList",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    EREQUESTTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "RID",
      "R",
      "List",
      "PreInfoList",
      "RLOC"),
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "eRequestTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r2_2_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_2_eca triggered");

  Ptr<Tuple> result = eRequestTemp;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("eRequestTemp_attr9"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("eRequestTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RULEEXEC,
    strlist ("eRequestTemp_attr1",
      "eRequestTemp_attr6",
      "eRequestTemp_attr7",
      "eRequestTemp_attr8",
      "PreLoc",
      "PreRID"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5",
      "ruleExec_attr6"));

  Insert (result);
}

void
DnsProvDistHlistRmitm::Prov_r2_3_eca (Ptr<Tuple> eRequestTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_3_eca triggered");

  Ptr<Tuple> result = eRequestTemp;

  result = result->Project (
    REQUEST,
    strlist ("eRequestTemp_attr2",
      "eRequestTemp_attr3",
      "eRequestTemp_attr4",
      "eRequestTemp_attr5",
      "eRequestTemp_attr1",
      "eRequestTemp_attr6",
      "eRequestTemp_attr2"),
    strlist ("request_attr1",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "request_attr5",
      "request_attr6",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r3_1_eca (Ptr<Tuple> request)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (NAME_SERVER)->Join (
    request,
    strlist ("name_server_attr1"),
    strlist ("request_attr1"));

  result = GetRelation (ADDRESS_RECORD)->Join (
    result,
    strlist ("address_record_attr2", "address_record_attr1"),
    strlist ("name_server_attr3", "request_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("request")),
              VarExpr::New ("request_attr1")),
            VarExpr::New ("request_attr2")),
          VarExpr::New ("request_attr3")),
        VarExpr::New ("request_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("name_server")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr2")),
        VarExpr::New ("name_server_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("address_record")),
            VarExpr::New ("request_attr1")),
          VarExpr::New ("name_server_attr3")),
        VarExpr::New ("address_record_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("request_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("PreLoclist",
    FAppend::New (
      VarExpr::New ("request_attr5"))));

  result->Assign (Assignor::New ("PreRIDlist",
    FAppend::New (
      VarExpr::New ("request_attr6"))));

  result->Assign (Assignor::New ("PreInfolist",
    FConcat::New (
      VarExpr::New ("PreLoclist"),
      VarExpr::New ("PreRIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FIndexOf::New (
        VarExpr::New ("request_attr2"),
        VarExpr::New ("name_server_attr2")),
      ValueExpr::New (Int32Value::New (-1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("request_attr2"),
      VarExpr::New ("name_server_attr2"))));

  result = result->Project (
    ERESULTTEMP,
    strlist ("RLOC",
      "address_record_attr3",
      "request_attr2",
      "request_attr3",
      "request_attr4",
      "RID",
      "R",
      "List",
      "PreInfolist",
      "RLOC"),
    strlist ("eResultTemp_attr1",
      "eResultTemp_attr2",
      "eResultTemp_attr3",
      "eResultTemp_attr4",
      "eResultTemp_attr5",
      "eResultTemp_attr6",
      "eResultTemp_attr7",
      "eResultTemp_attr8",
      "eResultTemp_attr9",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r3_2_eca (Ptr<Tuple> eResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_eca triggered");

  Ptr<Tuple> result = eResultTemp;

  result->Assign (Assignor::New ("PreLoc",
    FFirst::New (
      VarExpr::New ("eResultTemp_attr9"))));

  result->Assign (Assignor::New ("Remainlist",
    FRemoveFirst::New (
      VarExpr::New ("eResultTemp_attr9"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("Remainlist"))));

  result = result->Project (
    RULEEXEC,
    strlist ("eResultTemp_attr1",
      "eResultTemp_attr6",
      "eResultTemp_attr7",
      "eResultTemp_attr8",
      "PreLoc",
      "PreRID"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5",
      "ruleExec_attr6"));

  Insert (result);
}

void
DnsProvDistHlistRmitm::Prov_r3_3ECAMat (Ptr<Tuple> prov_r3_3resultssend)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3ECAMat triggered");

  Ptr<Tuple> result = prov_r3_3resultssend;

  result = result->Project (
    RESULTS,
    strlist ("prov_r3_3resultssend_attr1",
      "prov_r3_3resultssend_attr2",
      "prov_r3_3resultssend_attr3",
      "prov_r3_3resultssend_attr4",
      "prov_r3_3resultssend_attr5",
      "prov_r3_3resultssend_attr6"),
    strlist ("results_attr1",
      "results_attr2",
      "results_attr3",
      "results_attr4",
      "results_attr5",
      "results_attr6"));

  Insert (result);
}

void
DnsProvDistHlistRmitm::Prov_r3_3_eca (Ptr<Tuple> eResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_eca triggered");

  Ptr<Tuple> result = eResultTemp;

  result = result->Project (
    PROV_R3_3RESULTSSEND,
    strlist ("eResultTemp_attr2",
      "eResultTemp_attr3",
      "eResultTemp_attr4",
      "eResultTemp_attr5",
      "eResultTemp_attr6",
      "eResultTemp_attr1",
      "eResultTemp_attr2"),
    strlist ("prov_r3_3resultssend_attr1",
      "prov_r3_3resultssend_attr2",
      "prov_r3_3resultssend_attr3",
      "prov_r3_3resultssend_attr4",
      "prov_r3_3resultssend_attr5",
      "prov_r3_3resultssend_attr6",
      RN_DEST));

  Send (result);
}

void
DnsProvDistHlistRmitm::Prov_r3_4Eca0Ins (Ptr<Tuple> results)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4Eca0Ins triggered");

  Ptr<Tuple> result = results;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("result")),
              VarExpr::New ("results_attr1")),
            VarExpr::New ("results_attr2")),
          VarExpr::New ("results_attr3")),
        VarExpr::New ("results_attr4")))));

  result = result->Project (
    PROV,
    strlist ("results_attr1",
      "VID",
      "results_attr5",
      "results_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
DnsProvDistHlistRmitm::Prov_r3_4Eca0Del (Ptr<Tuple> results)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4Eca0Del triggered");

  Ptr<Tuple> result = results;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("result")),
              VarExpr::New ("results_attr1")),
            VarExpr::New ("results_attr2")),
          VarExpr::New ("results_attr3")),
        VarExpr::New ("results_attr4")))));

  result = result->Project (
    PROV,
    strlist ("results_attr1",
      "VID",
      "results_attr5",
      "results_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

