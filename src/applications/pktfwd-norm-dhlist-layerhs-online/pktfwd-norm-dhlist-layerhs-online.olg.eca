ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List := f_append(PID3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1(R+ List).
ECA Rule prov_rs1_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rs1_3_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketCount(@RLOC, RID, R, List, Rcount)>, Rcount == 0.
ECA Rule prov_rs1_4_eca ACTION_ADD<provLink(@RLOC, ProgID, RID, CurLhash, Preloc, PreRID, PreLhash)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Preloc := f_first(Tag), TempTag1 := f_removeFirst(Tag), PreRID := f_first(TempTag), TempTag2 := f_removeFirst(TempTag1), PreLhash := f_first(TempTag2), TempTag3 := f_removeFirst(TempTag2), ProgID := f_first(TempTag3), CurLhash := f_sha1(PreLhash+ RID).
ECA Rule prov_rs1_5_eca ACTION_REMOTE_SEND<packetProv(@Next, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, TempNewTag1 := f_removeFirst(Tag), TempNewTag2 := f_removeFirst(TempNewTag1), PreLhash := f_first(TempNewTag2), CurLhash := f_sha1(PreLhash+ RID), CurLhashlist := f_append(CurLhashlist), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(CurLhashlist, TempNewTag3), TempNewTag5 := f_concat(RIDlist, TempNewTag4), NewTag := f_concat(Loclist, TempNewTag5).
ECA Rule rs1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next).
ECA Rule prov_ri1Eca0Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, programID(@Node, DstAdd, ProgID), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri1Eca1Ins ACTION_LOCAL_SEND<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)> :- EVENT_INSERT<programID(@Node, DstAdd, ProgID)>, initPacket(@Node, SrcAdd, DstAdd, Data), PIDequi := f_sha1((+ Node)+ DstAdd).
ECA Rule prov_ri2_eca ACTION_LOCAL_SEND<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, COUNT< * >)> :- EVENT_RECV<initPacketHash(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID)>, equiHashTable(@Node, DstAdd, PIDequi).
ECA Rule prov_ri3_eca ACTION_ADD<equiHashTable(@Node, DstAdd, PIDequi)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, PIDcount == 0.
ECA Rule rh1_eca ACTION_REMOTE_SEND<packet(@Next, SrcAdd, DstAdd, Data, PIDHash)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, link(@Node, Next), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDcount != 0, PIDequiHash := f_append(PIDequi), PIDevHash := f_append(PIDev), ProgIDlist := f_append(ProgID), PIDHash1 := f_concat(PIDequiHash, PIDevHash), PIDHash := f_concat(PIDHash1, ProgIDlist).
ECA Rule prov_rh1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<initPacketCount(@Node, SrcAdd, DstAdd, Data, PIDequi, ProgID, PIDcount)>, link(@Node, Next), PIDcount == 0, PID := f_sha1((link+ Node)+ Next), List := f_append(PID), RLOC := Node, RID := f_sha1(R+ List), R := rh1, Equilist := f_append(PIDequi), PIDev := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), Evlist := f_append(PIDev), ProgIDlist := f_append(ProgID), InitLhashlist := f_append(NULL), InitProvNode := RLOC, InitProvNodelist := f_append(InitProvNode), InitProvHash := f_sha1(NULL), InitProvHashlist := f_append(InitProvHash), TempTag1 := f_concat(InitProvNodelist, InitProvHashlist), TempTag2 := f_concat(TempTag1, InitLhashlist), TempTag3 := f_concat(TempTag2, ProgIDlist), TempTag4 := f_concat(TempTag3, Evlist), Tag := f_concat(TempTag4, Equilist).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)> :- EVENT_RECV<packetProv(@Node, SrcAdd, DstAdd, Data, Tag)>, DstAdd == Node, PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), RLOC := Node, R := rh2, RID := f_sha1(R+ List).
ECA Rule prov_rh2_2_eca ACTION_LOCAL_SEND<epacketCount(@RLOC, RID, R, List, COUNT< * >)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, ruleExec(@RLOC, RID, R, List).
ECA Rule prov_rh2_4_eca ACTION_ADD<provLink(@RLOC, ProgID, RID, CurLhash, Preloc, PreRID, PreLhash)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, Preloc := f_first(Tag), TempTag1 := f_removeFirst(Tag), PreRID := f_first(TempTag), TempTag2 := f_removeFirst(TempTag1), PreLhash := f_first(TempTag2), TempTag3 := f_removeFirst(TempTag2), ProgID := f_first(TempTag3), CurLhash := f_sha1(PreLhash+ RID).
ECA Rule prov_rh2_5_eca ACTION_REMOTE_SEND<recvPacketProv(@Node, SrcAdd, DstAdd, Data, NewTag)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List, Tag)>, TempNewTag1 := f_removeFirst(Tag), TempNewTag2 := f_removeFirst(TempNewTag1), PreLhash := f_first(TempNewTag2), CurLhash := f_sha1(PreLhash+ RID), CurLhashlist := f_append(CurLhashlist), TempNewTag3 := f_removeFirst(TempNewTag2), RIDlist := f_append(RID), Loclist := f_append(RLOC), TempNewTag4 := f_concat(CurLhashlist, TempNewTag3), TempNewTag5 := f_concat(RIDlist, TempNewTag4), NewTag := f_concat(Loclist, TempNewTag5).
ECA Rule prov_rh2_6_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, NewTag)>.
ECA Rule ro1_eca ACTION_ADD<provHashTable(@Node, ProvID, ProgID, PreLoc, PreRID, PreLhash)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, PreLoc := f_first(Tag), RemainTag1 := f_removeFirst(Tag), PreRID := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), PreLhash := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), ProgID := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), EvHash := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), EqHash := f_first(RemainTag5), ProvID := f_sha1(ProgID, PIDequi).
ECA Rule ro2_eca ACTION_ADD<recvPacketQry(@Node, PID, ProvID, EvHash)> :- EVENT_RECV<recvPacketProv(@Node, SrcAdd, DstAdd, Data, Tag)>, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PreLoc := f_first(Tag), RemainTag1 := f_removeFirst(Tag), PreRID := f_first(RemainTag1), RemainTag2 := f_removeFirst(RemainTag1), PreLhash := f_first(RemainTag2), RemainTag3 := f_removeFirst(RemainTag2), ProgID := f_first(RemainTag3), RemainTag4 := f_removeFirst(RemainTag3), EvHash := f_first(RemainTag4), RemainTag5 := f_removeFirst(RemainTag4), EqHash := f_first(RemainTag5), ProvID := f_sha1(ProgID, PIDequi).
ECA Rule rh2_eca ACTION_ADD<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, DstAdd == Node.
ECA Rule rho3_eca ACTION_ADD<recvPacketQry(@Node, PID, ProvID, PIDev)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data, PIDHash)>, DstAdd == Node, PID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), PIDequi := f_first(PIDHash), PIDHash1 := f_removeFirst(PIDHash), PIDev := f_first(PIDHash1), PIDHash2 := f_removeFirst(PIDHash1), ProgID := f_first(PIDHash2), ProvID := f_sha1(ProgID, PIDequi).
