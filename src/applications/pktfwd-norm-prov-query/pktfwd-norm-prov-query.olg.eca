ECA Rule r00Eca1Ins ACTION_ADD<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, $1 := Node, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), RID := VID.
ECA Rule r00Eca1Del ACTION_DELETE<prov(@Node, VID, RID, $1)> :- EVENT_DELETE<initPacket(@Node, SrcAdd, DstAdd, Data)>, $1 := Node, VID := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), RID := VID.
ECA Rule r01Eca1Ins ACTION_ADD<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<link(@Node, Next)>, $1 := Node, VID := f_sha1((link+ Node)+ Next), RID := VID.
ECA Rule r01Eca1Del ACTION_DELETE<prov(@Node, VID, RID, $1)> :- EVENT_DELETE<link(@Node, Next)>, $1 := Node, VID := f_sha1((link+ Node)+ Next), RID := VID.
ECA Rule r03Eca1Ins ACTION_ADD<prov(@Node, VID, RID, $1)> :- EVENT_INSERT<flowEntry(@Node, DstEntry, Next)>, $1 := Node, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), RID := VID.
ECA Rule r03Eca1Del ACTION_DELETE<prov(@Node, VID, RID, $1)> :- EVENT_DELETE<flowEntry(@Node, DstEntry, Next)>, $1 := Node, VID := f_sha1(((flowEntry+ Node)+ DstEntry)+ Next), RID := VID.
ECA Rule prov_rs1_1_eca ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1(((flowEntry+ Node)+ DstAdd)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1((link+ Node)+ Next), List4 := f_append(PID4), List := f_concat(List, List4), RLOC := Node, R := rs1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rs1_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rs1_3_eca ACTION_REMOTE_SEND<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rs1_4_eca ACTION_LOCAL_SEND<packet(@Next, SrcAdd, DstAdd, Data)> :- EVENT_RECV<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)>.
ECA Rule prov_rs1_5_eca ACTION_ADD<prov(@Next, VID, RID, RLOC)> :- EVENT_RECV<epacket(@Next, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((packet+ Next)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule prov_rh1_1Eca0Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_INSERT<initPacket(@Node, SrcAdd, DstAdd, Data)>, flowEntry(@Node, DstAdd, Next), link(@Node, Next), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh1_1Eca1Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_INSERT<flowEntry(@Node, DstAdd, Next)>, initPacket(@Node, SrcAdd, DstAdd, Data), link(@Node, Next), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh1_1Eca2Ins ACTION_REMOTE_SEND<epacketTemp(@RLOC, Next, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_INSERT<link(@Node, Next)>, initPacket(@Node, SrcAdd, DstAdd, Data), flowEntry(@Node, DstAdd, Next), PID2 := f_sha1((((initPacket+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), PID3 := f_sha1((link+ Node)+ Next), List3 := f_append(PID3), List := f_concat(List, List3), RLOC := Node, R := rh1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_1_eca ACTION_REMOTE_SEND<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List)> :- EVENT_RECV<packet(@Node, SrcAdd, DstAdd, Data)>, DstAdd == Node, PID2 := f_sha1((((packet+ Node)+ SrcAdd)+ DstAdd)+ Data), List := f_append(PID2), RLOC := Node, R := rh2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_rh2_2_eca ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rh2_3_eca ACTION_REMOTE_SEND<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)> :- EVENT_RECV<erecvPacketTemp(@RLOC, Node, SrcAdd, DstAdd, Data, RID, R, List)>.
ECA Rule prov_rh2_4_eca ACTION_LOCAL_SEND<recvPacket(@Node, SrcAdd, DstAdd, Data)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>.
ECA Rule prov_rh2_5_eca ACTION_ADD<prov(@Node, VID, RID, RLOC)> :- EVENT_RECV<erecvPacket(@Node, SrcAdd, DstAdd, Data, RID, RLOC)>, VID := f_sha1((((recvPacket+ Node)+ SrcAdd)+ DstAdd)+ Data).
ECA Rule edb1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RID, RLoc), RID == VID, Prov := f_pEDB(VID, X).
ECA Rule idb1_eca ACTION_ADD<pQList(@X, QID, LIST< RID >)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RID, RLoc), RID != VID.
ECA Rule idb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, Buf := f_empty().
ECA Rule idb3_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, N := 1.
ECA Rule idb4_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N)> :- EVENT_RECV<pIterate(@X, QID, N1)>, pQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule idb5_eca ACTION_LOCAL_SEND<eRuleQuery(@X, NQID, RID)> :- EVENT_RECV<pIterate(@X, QID, N)>, pQList(@X, QID, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
ECA Rule idb6_eca ACTION_REMOTE_SEND<ruleQuery(@RLoc, QID, RID, X)> :- EVENT_RECV<eRuleQuery(@X, QID, RID)>, prov(@X, VID, RID, RLoc).
ECA Rule idb7_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule idb8Eca0Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, pQList(@X, QID, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb8Eca1Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pQList(@X, QID, List)>, pResultTmp(@X, QID, Ret, VID, Buf), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb9_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<ePReturn(@X, QID)>, pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, List)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List).
ECA Rule rv2_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, Buf := f_empty().
ECA Rule rv3_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, N := 1.
ECA Rule rv4_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule rv5_eca ACTION_LOCAL_SEND<eProvQuery(@X, NQID, VID)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv6_eca ACTION_LOCAL_SEND<provQuery(@X, QID, VID, $1)> :- EVENT_RECV<eProvQuery(@X, QID, VID)>, $1 := X.
ECA Rule rv7_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<pReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv8Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, rQList(@X, QID, List), f_size(Buf) == f_size(List).
ECA Rule rv8Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rQList(@X, QID, List)>, rResultTmp(@X, QID, Ret, RID, Buf), f_size(Buf) == f_size(List).
ECA Rule rv9_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID)>, rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, R, List), Prov := f_pRULE(Buf, X, R).
ECA Rule q1_eca ACTION_LOCAL_SEND<recvCount(@Node, Src, Dst, Data, COUNT< * >)> :- EVENT_RECV<recvPacket(@Node, Src, Dst, Data)>, recordSD(@Node, Src, Dst).
ECA Rule q2_eca ACTION_ADD<recordSD(@Node, Src, Dst)> :- EVENT_RECV<recvCount(@Node, Src, Dst, Data, Rcount)>, Rcount == 0.
ECA Rule q3_eca ACTION_ADD<initProvQuery(@Node, QID, UID, Dst)> :- EVENT_RECV<recvCount(@Node, Src, Dst, Data, Rcount)>, Rcount == 0, Time := f_now(), UID := f_sha1((((recvPacket+ Node)+ Src)+ Dst)+ Data), QID := f_sha1((+ UID)+ Time).
ECA Rule q4Eca0Ins ACTION_LOCAL_SEND<provQuery(@Node, QID, UID, Dst)> :- EVENT_INSERT<initProvQuery(@Node, QID, UID, Dst)>.
ECA Rule q5_eca ACTION_LOCAL_SEND<recordProv(@Node, QID, UID, Prov)> :- EVENT_RECV<pReturn(@Node, QID, UID, Prov)>, initProvQuery(@Node, QID, UID, Dst).
