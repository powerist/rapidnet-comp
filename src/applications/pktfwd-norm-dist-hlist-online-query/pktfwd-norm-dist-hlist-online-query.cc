/* A RapidNet application. Generated by RapidNet compiler. */

#include "pktfwd-norm-dist-hlist-online-query.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pktfwdnormdisthlistonlinequery;

const string PktfwdNormDistHlistOnlineQuery::BASEQUERY = "baseQuery";
const string PktfwdNormDistHlistOnlineQuery::BASERETURN = "baseReturn";
const string PktfwdNormDistHlistOnlineQuery::ERRETURN = "eRReturn";
const string PktfwdNormDistHlistOnlineQuery::EPACKETCOUNT = "epacketCount";
const string PktfwdNormDistHlistOnlineQuery::EPACKETTEMP = "epacketTemp";
const string PktfwdNormDistHlistOnlineQuery::EQUIHASHTABLE = "equiHashTable";
const string PktfwdNormDistHlistOnlineQuery::ERECVPACKETTEMP = "erecvPacketTemp";
const string PktfwdNormDistHlistOnlineQuery::FLOWENTRY = "flowEntry";
const string PktfwdNormDistHlistOnlineQuery::INITPACKET = "initPacket";
const string PktfwdNormDistHlistOnlineQuery::INITPACKETCOUNT = "initPacketCount";
const string PktfwdNormDistHlistOnlineQuery::INITPACKETHASH = "initPacketHash";
const string PktfwdNormDistHlistOnlineQuery::LINK = "link";
const string PktfwdNormDistHlistOnlineQuery::PQLIST = "pQList";
const string PktfwdNormDistHlistOnlineQuery::PRESULTTMP = "pResultTmp";
const string PktfwdNormDistHlistOnlineQuery::PRETURN = "pReturn";
const string PktfwdNormDistHlistOnlineQuery::PACKET = "packet";
const string PktfwdNormDistHlistOnlineQuery::PACKETPROV = "packetProv";
const string PktfwdNormDistHlistOnlineQuery::PROGRAMID = "programID";
const string PktfwdNormDistHlistOnlineQuery::PROVHASHTABLE = "provHashTable";
const string PktfwdNormDistHlistOnlineQuery::PROVLINK = "provLink";
const string PktfwdNormDistHlistOnlineQuery::PROV_RH2_5RECVPACKETSEND = "prov_rh2_5recvPacketsend";
const string PktfwdNormDistHlistOnlineQuery::RITERATE = "rIterate";
const string PktfwdNormDistHlistOnlineQuery::RQLIST = "rQList";
const string PktfwdNormDistHlistOnlineQuery::RRESULTTMP = "rResultTmp";
const string PktfwdNormDistHlistOnlineQuery::RRETURN = "rReturn";
const string PktfwdNormDistHlistOnlineQuery::RECVPACKET = "recvPacket";
const string PktfwdNormDistHlistOnlineQuery::RECVPACKETNP = "recvPacketNP";
const string PktfwdNormDistHlistOnlineQuery::RECVPACKETPROV = "recvPacketProv";
const string PktfwdNormDistHlistOnlineQuery::RULEEXEC = "ruleExec";
const string PktfwdNormDistHlistOnlineQuery::RULEQUERY = "ruleQuery";

NS_LOG_COMPONENT_DEFINE ("PktfwdNormDistHlistOnlineQuery");
NS_OBJECT_ENSURE_REGISTERED (PktfwdNormDistHlistOnlineQuery);

TypeId
PktfwdNormDistHlistOnlineQuery::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pktfwdnormdisthlistonlinequery::PktfwdNormDistHlistOnlineQuery")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PktfwdNormDistHlistOnlineQuery> ()
    ;
  return tid;
}

PktfwdNormDistHlistOnlineQuery::PktfwdNormDistHlistOnlineQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PktfwdNormDistHlistOnlineQuery::~PktfwdNormDistHlistOnlineQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PktfwdNormDistHlistOnlineQuery::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PktfwdNormDistHlistOnlineQuery::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormDistHlistOnlineQuery Application Started");
}

void
PktfwdNormDistHlistOnlineQuery::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PktfwdNormDistHlistOnlineQuery Application Stopped");
}

void
PktfwdNormDistHlistOnlineQuery::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (EQUIHASHTABLE, attrdeflist (
    attrdef ("equiHashTable_attr2", IPV4)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", IPV4)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", IPV4),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROGRAMID, attrdeflist (
    attrdef ("programID_attr2", IPV4)));

  AddRelationWithKeys (PROVHASHTABLE, attrdeflist (
    attrdef ("provHashTable_attr3", LIST)));

  AddRelationWithKeys (PROVLINK, attrdeflist (
    attrdef ("provLink_attr2", ID),
    attrdef ("provLink_attr3", INT32),
    attrdef ("provLink_attr4", IPV4),
    attrdef ("provLink_attr5", ID),
    attrdef ("provLink_attr6", INT32)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", IPV4),
    attrdef ("recvPacket_attr3", IPV4),
    attrdef ("recvPacket_attr4", STR)));

  AddRelationWithKeys (RECVPACKETPROV, attrdeflist (
    attrdef ("recvPacketProv_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr2", ID)));

}

void
PktfwdNormDistHlistOnlineQuery::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, PACKETPROV))
    {
      Prov_rs1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETCOUNT))
    {
      Prov_rs1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPACKETTEMP))
    {
      Prov_rs1_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rs1_eca (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Prov_ri1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PROGRAMID))
    {
      Prov_ri1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETHASH))
    {
      Prov_ri2_eca (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETCOUNT))
    {
      Prov_ri3_eca (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETCOUNT))
    {
      Rh1_eca (tuple);
    }
  if (IsRecvEvent (tuple, INITPACKETCOUNT))
    {
      Prov_rh1_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKETPROV))
    {
      Prov_rh2_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROV_RH2_5RECVPACKETSEND))
    {
      Prov_rh2_5ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, ERECVPACKETTEMP))
    {
      Prov_rh2_5_eca (tuple);
    }
  if (IsInsertEvent (tuple, RECVPACKET))
    {
      Ro1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECVPACKET))
    {
      Ro1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, RECVPACKET))
    {
      Ro2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECVPACKET))
    {
      Ro2Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RECVPACKETNP))
    {
      Rho3_eca (tuple);
    }
  if (IsRecvEvent (tuple, BASEQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsInsertEvent (tuple, RECVPACKETPROV))
    {
      Idb1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PROVHASHTABLE))
    {
      Idb1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, RECVPACKETPROV))
    {
      Idb2Eca2Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RECVPACKETPROV))
    {
      Idb2Eca2Del (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb9Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, BASERETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Rv8_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv9Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv9Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv10_eca (tuple);
    }
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rs1_1_eca (Ptr<Tuple> packetProv)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packetProv,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packetProv_attr3", "packetProv_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packetProv_attr1"));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("flowEntry")),
            VarExpr::New ("packetProv_attr1")),
          VarExpr::New ("packetProv_attr3")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("packetProv_attr1")),
        VarExpr::New ("flowEntry_attr3")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packetProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rs1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "flowEntry_attr3",
      "packetProv_attr2",
      "packetProv_attr3",
      "packetProv_attr4",
      "RID",
      "R",
      "List",
      "packetProv_attr5",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rs1_2_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    epacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("epacketTemp_attr8", "epacketTemp_attr7", "epacketTemp_attr6", "epacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, epacketTemp);

  result = result->Project (
    EPACKETCOUNT,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "count"),
    strlist ("epacketCount_attr1",
      "epacketCount_attr2",
      "epacketCount_attr3",
      "epacketCount_attr4",
      "epacketCount_attr5"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rs1_3_eca (Ptr<Tuple> epacketCount)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_3_eca triggered");

  Ptr<Tuple> result = epacketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("epacketCount_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEXEC,
    strlist ("epacketCount_attr1",
      "epacketCount_attr2",
      "epacketCount_attr3",
      "epacketCount_attr4"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rs1_4_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_4_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result->Assign (Assignor::New ("PreCount",
    FFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("CurCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("PreCount"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("TempTag1",
    FRemoveFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("Preloc",
    FFirst::New (
      VarExpr::New ("TempTag"))));

  result->Assign (Assignor::New ("TempTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("TempTag2"))));

  result = result->Project (
    PROVLINK,
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr6",
      "CurCount",
      "Preloc",
      "PreRID",
      "PreCount"),
    strlist ("provLink_attr1",
      "provLink_attr2",
      "provLink_attr3",
      "provLink_attr4",
      "provLink_attr5",
      "provLink_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rs1_5_eca (Ptr<Tuple> epacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rs1_5_eca triggered");

  Ptr<Tuple> result = epacketTemp;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("NewCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("Count"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("NewCountlist",
    FAppend::New (
      VarExpr::New ("NewCount"))));

  result->Assign (Assignor::New ("TempNewTag1",
    FRemoveFirst::New (
      VarExpr::New ("epacketTemp_attr9"))));

  result->Assign (Assignor::New ("TempNewTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag1"))));

  result->Assign (Assignor::New ("TempNewTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("epacketTemp_attr6"))));

  result->Assign (Assignor::New ("Loclist",
    FAppend::New (
      VarExpr::New ("epacketTemp_attr1"))));

  result->Assign (Assignor::New ("TempNewTag4",
    FConcat::New (
      VarExpr::New ("RIDlist"),
      VarExpr::New ("TempNewTag3"))));

  result->Assign (Assignor::New ("TempNewTag5",
    FConcat::New (
      VarExpr::New ("Loclist"),
      VarExpr::New ("TempNewTag4"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("NewCountlist"),
      VarExpr::New ("TempNewTag5"))));

  result = result->Project (
    PACKETPROV,
    strlist ("epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "NewTag",
      "epacketTemp_attr2"),
    strlist ("packetProv_attr1",
      "packetProv_attr2",
      "packetProv_attr3",
      "packetProv_attr4",
      "packetProv_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rs1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    packet,
    strlist ("flowEntry_attr2", "flowEntry_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr2", "link_attr1"),
    strlist ("flowEntry_attr3", "packet_attr1"));

  result = result->Project (
    PACKET,
    strlist ("flowEntry_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      "flowEntry_attr3"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_ri1Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Prov_ri1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROGRAMID)->Join (
    initPacket,
    strlist ("programID_attr2", "programID_attr1"),
    strlist ("initPacket_attr3", "initPacket_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("initPacket_attr1")),
        VarExpr::New ("initPacket_attr3")))));

  result = result->Project (
    INITPACKETHASH,
    strlist ("initPacket_attr1",
      "initPacket_attr2",
      "initPacket_attr3",
      "initPacket_attr4",
      "PIDequi",
      "programID_attr3"),
    strlist ("initPacketHash_attr1",
      "initPacketHash_attr2",
      "initPacketHash_attr3",
      "initPacketHash_attr4",
      "initPacketHash_attr5",
      "initPacketHash_attr6"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_ri1Eca1Ins (Ptr<Tuple> programID)
{
  RAPIDNET_LOG_INFO ("Prov_ri1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    programID,
    strlist ("initPacket_attr3", "initPacket_attr1"),
    strlist ("programID_attr2", "programID_attr1"));

  result->Assign (Assignor::New ("PIDequi",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("programID_attr1")),
        VarExpr::New ("programID_attr2")))));

  result = result->Project (
    INITPACKETHASH,
    strlist ("programID_attr1",
      "initPacket_attr2",
      "programID_attr2",
      "initPacket_attr4",
      "PIDequi",
      "programID_attr3"),
    strlist ("initPacketHash_attr1",
      "initPacketHash_attr2",
      "initPacketHash_attr3",
      "initPacketHash_attr4",
      "initPacketHash_attr5",
      "initPacketHash_attr6"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_ri2_eca (Ptr<Tuple> initPacketHash)
{
  RAPIDNET_LOG_INFO ("Prov_ri2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EQUIHASHTABLE)->Join (
    initPacketHash,
    strlist ("equiHashTable_attr2", "equiHashTable_attr1", "equiHashTable_attr3"),
    strlist ("initPacketHash_attr3", "initPacketHash_attr1", "initPacketHash_attr5"));

  result = AggWrapCount::New ()->Compute (result, initPacketHash);

  result = result->Project (
    INITPACKETCOUNT,
    strlist ("initPacketHash_attr1",
      "initPacketHash_attr2",
      "initPacketHash_attr3",
      "initPacketHash_attr4",
      "initPacketHash_attr5",
      "initPacketHash_attr6",
      "count"),
    strlist ("initPacketCount_attr1",
      "initPacketCount_attr2",
      "initPacketCount_attr3",
      "initPacketCount_attr4",
      "initPacketCount_attr5",
      "initPacketCount_attr6",
      "initPacketCount_attr7"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_ri3_eca (Ptr<Tuple> initPacketCount)
{
  RAPIDNET_LOG_INFO ("Prov_ri3_eca triggered");

  Ptr<Tuple> result = initPacketCount;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("initPacketCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EQUIHASHTABLE,
    strlist ("initPacketCount_attr1",
      "initPacketCount_attr3",
      "initPacketCount_attr5"),
    strlist ("equiHashTable_attr1",
      "equiHashTable_attr2",
      "equiHashTable_attr3"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rh1_eca (Ptr<Tuple> initPacketCount)
{
  RAPIDNET_LOG_INFO ("Rh1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacketCount,
    strlist ("link_attr1"),
    strlist ("initPacketCount_attr1"));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacketCount_attr1")),
            VarExpr::New ("initPacketCount_attr2")),
          VarExpr::New ("initPacketCount_attr3")),
        VarExpr::New ("initPacketCount_attr4")))));

  result->Assign (Assignor::New ("PIDequiHash",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr5"))));

  result->Assign (Assignor::New ("PIDevHash",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("ProgIDlist",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr6"))));

  result->Assign (Assignor::New ("PIDHash1",
    FConcat::New (
      VarExpr::New ("PIDequiHash"),
      VarExpr::New ("PIDevHash"))));

  result->Assign (Assignor::New ("PIDHash",
    FConcat::New (
      VarExpr::New ("PIDHash1"),
      VarExpr::New ("ProgIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("initPacketCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PACKET,
    strlist ("link_attr2",
      "initPacketCount_attr2",
      "initPacketCount_attr3",
      "initPacketCount_attr4",
      "PIDHash",
      "link_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rh1_1_eca (Ptr<Tuple> initPacketCount)
{
  RAPIDNET_LOG_INFO ("Prov_rh1_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacketCount,
    strlist ("link_attr1"),
    strlist ("initPacketCount_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("link")),
          VarExpr::New ("initPacketCount_attr1")),
        VarExpr::New ("link_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("initPacketCount_attr1")));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh1"))));

  result->Assign (Assignor::New ("Equilist",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("initPacket")),
              VarExpr::New ("initPacketCount_attr1")),
            VarExpr::New ("initPacketCount_attr2")),
          VarExpr::New ("initPacketCount_attr3")),
        VarExpr::New ("initPacketCount_attr4")))));

  result->Assign (Assignor::New ("Evlist",
    FAppend::New (
      VarExpr::New ("PIDev"))));

  result->Assign (Assignor::New ("ProgIDlist",
    FAppend::New (
      VarExpr::New ("initPacketCount_attr6"))));

  result->Assign (Assignor::New ("Count",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("Countlist",
    FAppend::New (
      VarExpr::New ("Count"))));

  result->Assign (Assignor::New ("InitProvNode",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("InitProvNodelist",
    FAppend::New (
      VarExpr::New ("InitProvNode"))));

  result->Assign (Assignor::New ("InitProvHash",
    FSha1::New (
      ValueExpr::New (StrValue::New ("NULL")))));

  result->Assign (Assignor::New ("InitProvHashlist",
    FAppend::New (
      VarExpr::New ("InitProvHash"))));

  result->Assign (Assignor::New ("TempTag1",
    FConcat::New (
      VarExpr::New ("Countlist"),
      VarExpr::New ("InitProvNodelist"))));

  result->Assign (Assignor::New ("TempTag2",
    FConcat::New (
      VarExpr::New ("TempTag1"),
      VarExpr::New ("InitProvHashlist"))));

  result->Assign (Assignor::New ("TempTag3",
    FConcat::New (
      VarExpr::New ("TempTag2"),
      VarExpr::New ("Equilist"))));

  result->Assign (Assignor::New ("TempTag4",
    FConcat::New (
      VarExpr::New ("TempTag3"),
      VarExpr::New ("Evlist"))));

  result->Assign (Assignor::New ("Tag",
    FConcat::New (
      VarExpr::New ("TempTag4"),
      VarExpr::New ("ProgIDlist"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("initPacketCount_attr7"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPACKETTEMP,
    strlist ("RLOC",
      "link_attr2",
      "initPacketCount_attr2",
      "initPacketCount_attr3",
      "initPacketCount_attr4",
      "RID",
      "R",
      "List",
      "Tag",
      "RLOC"),
    strlist ("epacketTemp_attr1",
      "epacketTemp_attr2",
      "epacketTemp_attr3",
      "epacketTemp_attr4",
      "epacketTemp_attr5",
      "epacketTemp_attr6",
      "epacketTemp_attr7",
      "epacketTemp_attr8",
      "epacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rh2_1_eca (Ptr<Tuple> packetProv)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_1_eca triggered");

  Ptr<Tuple> result = packetProv;

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("packet")),
              VarExpr::New ("packetProv_attr1")),
            VarExpr::New ("packetProv_attr2")),
          VarExpr::New ("packetProv_attr3")),
        VarExpr::New ("packetProv_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("packetProv_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rh2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packetProv_attr3"),
      VarExpr::New ("packetProv_attr1"))));

  result = result->Project (
    ERECVPACKETTEMP,
    strlist ("RLOC",
      "packetProv_attr1",
      "packetProv_attr2",
      "packetProv_attr3",
      "packetProv_attr4",
      "RID",
      "R",
      "List",
      "packetProv_attr5",
      "RLOC"),
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "erecvPacketTemp_attr9",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rh2_2_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    erecvPacketTemp,
    strlist ("ruleExec_attr4", "ruleExec_attr3", "ruleExec_attr2", "ruleExec_attr1"),
    strlist ("erecvPacketTemp_attr8", "erecvPacketTemp_attr7", "erecvPacketTemp_attr6", "erecvPacketTemp_attr1"));

  result = AggWrapCount::New ()->Compute (result, erecvPacketTemp);

  result = result->Project (
    EPACKETCOUNT,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "erecvPacketTemp_attr7",
      "erecvPacketTemp_attr8",
      "count"),
    strlist ("epacketCount_attr1",
      "epacketCount_attr2",
      "epacketCount_attr3",
      "epacketCount_attr4",
      "epacketCount_attr5"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rh2_4_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_4_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result->Assign (Assignor::New ("PreCount",
    FFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("CurCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("PreCount"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("TempTag1",
    FRemoveFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("Preloc",
    FFirst::New (
      VarExpr::New ("TempTag"))));

  result->Assign (Assignor::New ("TempTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempTag1"))));

  result->Assign (Assignor::New ("PreRID",
    FFirst::New (
      VarExpr::New ("TempTag2"))));

  result = result->Project (
    PROVLINK,
    strlist ("erecvPacketTemp_attr1",
      "erecvPacketTemp_attr6",
      "CurCount",
      "Preloc",
      "PreRID",
      "PreCount"),
    strlist ("provLink_attr1",
      "provLink_attr2",
      "provLink_attr3",
      "provLink_attr4",
      "provLink_attr5",
      "provLink_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rh2_5ECAMat (Ptr<Tuple> prov_rh2_5recvPacketsend)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5ECAMat triggered");

  Ptr<Tuple> result = prov_rh2_5recvPacketsend;

  result = result->Project (
    RECVPACKET,
    strlist ("prov_rh2_5recvPacketsend_attr1",
      "prov_rh2_5recvPacketsend_attr2",
      "prov_rh2_5recvPacketsend_attr3",
      "prov_rh2_5recvPacketsend_attr4",
      "prov_rh2_5recvPacketsend_attr5"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3",
      "recvPacket_attr4",
      "recvPacket_attr5"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Prov_rh2_5_eca (Ptr<Tuple> erecvPacketTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rh2_5_eca triggered");

  Ptr<Tuple> result = erecvPacketTemp;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("NewCount",
    Operation::New (RN_PLUS,
      VarExpr::New ("Count"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("NewCountlist",
    FAppend::New (
      VarExpr::New ("NewCount"))));

  result->Assign (Assignor::New ("TempNewTag1",
    FRemoveFirst::New (
      VarExpr::New ("erecvPacketTemp_attr9"))));

  result->Assign (Assignor::New ("TempNewTag2",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag1"))));

  result->Assign (Assignor::New ("TempNewTag3",
    FRemoveFirst::New (
      VarExpr::New ("TempNewTag2"))));

  result->Assign (Assignor::New ("RIDlist",
    FAppend::New (
      VarExpr::New ("erecvPacketTemp_attr6"))));

  result->Assign (Assignor::New ("Loclist",
    FAppend::New (
      VarExpr::New ("erecvPacketTemp_attr1"))));

  result->Assign (Assignor::New ("TempNewTag4",
    FConcat::New (
      VarExpr::New ("RIDlist"),
      VarExpr::New ("TempNewTag3"))));

  result->Assign (Assignor::New ("TempNewTag5",
    FConcat::New (
      VarExpr::New ("Loclist"),
      VarExpr::New ("TempNewTag4"))));

  result->Assign (Assignor::New ("NewTag",
    FConcat::New (
      VarExpr::New ("NewCountlist"),
      VarExpr::New ("TempNewTag5"))));

  result = result->Project (
    PROV_RH2_5RECVPACKETSEND,
    strlist ("erecvPacketTemp_attr2",
      "erecvPacketTemp_attr3",
      "erecvPacketTemp_attr4",
      "erecvPacketTemp_attr5",
      "NewTag",
      "erecvPacketTemp_attr2"),
    strlist ("prov_rh2_5recvPacketsend_attr1",
      "prov_rh2_5recvPacketsend_attr2",
      "prov_rh2_5recvPacketsend_attr3",
      "prov_rh2_5recvPacketsend_attr4",
      "prov_rh2_5recvPacketsend_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Ro1Eca0Ins (Ptr<Tuple> recvPacket)
{
  RAPIDNET_LOG_INFO ("Ro1Eca0Ins triggered");

  Ptr<Tuple> result = recvPacket;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("Loc",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RID",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result->Assign (Assignor::New ("EquiHash",
    FSha1::New (
      VarExpr::New ("ProgID"),
      VarExpr::New ("PIDequi"))));

  result = result->Project (
    PROVHASHTABLE,
    strlist ("recvPacket_attr1",
      "EquiHash",
      "ProgID",
      "Loc",
      "RID",
      "Count"),
    strlist ("provHashTable_attr1",
      "provHashTable_attr2",
      "provHashTable_attr3",
      "provHashTable_attr4",
      "provHashTable_attr5",
      "provHashTable_attr6"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Ro1Eca0Del (Ptr<Tuple> recvPacket)
{
  RAPIDNET_LOG_INFO ("Ro1Eca0Del triggered");

  Ptr<Tuple> result = recvPacket;

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("Loc",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RID",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result->Assign (Assignor::New ("EquiHash",
    FSha1::New (
      VarExpr::New ("ProgID"),
      VarExpr::New ("PIDequi"))));

  result = result->Project (
    PROVHASHTABLE,
    strlist ("recvPacket_attr1",
      "EquiHash",
      "ProgID",
      "Loc",
      "RID",
      "Count"),
    strlist ("provHashTable_attr1",
      "provHashTable_attr2",
      "provHashTable_attr3",
      "provHashTable_attr4",
      "provHashTable_attr5",
      "provHashTable_attr6"));

  Delete (result);
}

void
PktfwdNormDistHlistOnlineQuery::Ro2Eca0Ins (Ptr<Tuple> recvPacket)
{
  RAPIDNET_LOG_INFO ("Ro2Eca0Ins triggered");

  Ptr<Tuple> result = recvPacket;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacket_attr1")),
            VarExpr::New ("recvPacket_attr2")),
          VarExpr::New ("recvPacket_attr3")),
        VarExpr::New ("recvPacket_attr4")))));

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("Loc",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RID",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result->Assign (Assignor::New ("EquiHash",
    FSha1::New (
      VarExpr::New ("ProgID"),
      VarExpr::New ("PIDequi"))));

  result = result->Project (
    RECVPACKETPROV,
    strlist ("recvPacket_attr1",
      "PID",
      "EquiHash",
      "PIDev"),
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "recvPacketProv_attr3",
      "recvPacketProv_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Ro2Eca0Del (Ptr<Tuple> recvPacket)
{
  RAPIDNET_LOG_INFO ("Ro2Eca0Del triggered");

  Ptr<Tuple> result = recvPacket;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacket_attr1")),
            VarExpr::New ("recvPacket_attr2")),
          VarExpr::New ("recvPacket_attr3")),
        VarExpr::New ("recvPacket_attr4")))));

  result->Assign (Assignor::New ("Count",
    FFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("RemainTag1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacket_attr5"))));

  result->Assign (Assignor::New ("Loc",
    FFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RemainTag2",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag1"))));

  result->Assign (Assignor::New ("RID",
    FFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("RemainTag3",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag2"))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("RemainTag4",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag3"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("RemainTag5",
    FRemoveFirst::New (
      VarExpr::New ("RemainTag4"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("RemainTag5"))));

  result->Assign (Assignor::New ("EquiHash",
    FSha1::New (
      VarExpr::New ("ProgID"),
      VarExpr::New ("PIDequi"))));

  result = result->Project (
    RECVPACKETPROV,
    strlist ("recvPacket_attr1",
      "PID",
      "EquiHash",
      "PIDev"),
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "recvPacketProv_attr3",
      "recvPacketProv_attr4"));

  Delete (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rh2_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh2_eca triggered");

  Ptr<Tuple> result = packet;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Project (
    RECVPACKETNP,
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5"),
    strlist ("recvPacketNP_attr1",
      "recvPacketNP_attr2",
      "recvPacketNP_attr3",
      "recvPacketNP_attr4",
      "recvPacketNP_attr5"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rho3_eca (Ptr<Tuple> recvPacketNP)
{
  RAPIDNET_LOG_INFO ("Rho3_eca triggered");

  Ptr<Tuple> result = recvPacketNP;

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("recvPacket")),
              VarExpr::New ("recvPacketNP_attr1")),
            VarExpr::New ("recvPacketNP_attr2")),
          VarExpr::New ("recvPacketNP_attr3")),
        VarExpr::New ("recvPacketNP_attr4")))));

  result->Assign (Assignor::New ("PIDequi",
    FFirst::New (
      VarExpr::New ("recvPacketNP_attr5"))));

  result->Assign (Assignor::New ("PIDHash1",
    FRemoveFirst::New (
      VarExpr::New ("recvPacketNP_attr5"))));

  result->Assign (Assignor::New ("PIDev",
    FFirst::New (
      VarExpr::New ("PIDHash1"))));

  result->Assign (Assignor::New ("PIDHash2",
    FRemoveFirst::New (
      VarExpr::New ("PIDHash1"))));

  result->Assign (Assignor::New ("ProgID",
    FFirst::New (
      VarExpr::New ("PIDHash2"))));

  result->Assign (Assignor::New ("EquiHash",
    FSha1::New (
      VarExpr::New ("ProgID"),
      VarExpr::New ("PIDequi"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("recvPacketNP_attr3"),
      VarExpr::New ("recvPacketNP_attr1"))));

  result = result->Project (
    RECVPACKETPROV,
    strlist ("recvPacketNP_attr1",
      "PID",
      "EquiHash",
      "PIDev"),
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "recvPacketProv_attr3",
      "recvPacketProv_attr4"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Edb1_eca (Ptr<Tuple> baseQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<Tuple> result = baseQuery;

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("baseQuery_attr3"),
      VarExpr::New ("baseQuery_attr1"))));

  result = result->Project (
    BASERETURN,
    strlist ("baseQuery_attr4",
      "baseQuery_attr2",
      "baseQuery_attr3",
      "Prov",
      "baseQuery_attr4"),
    strlist ("baseReturn_attr1",
      "baseReturn_attr2",
      "baseReturn_attr3",
      "baseReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Idb1Eca0Ins (Ptr<Tuple> recvPacketProv)
{
  RAPIDNET_LOG_INFO ("Idb1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVHASHTABLE)->Join (
    recvPacketProv,
    strlist ("provHashTable_attr2", "provHashTable_attr1"),
    strlist ("recvPacketProv_attr3", "recvPacketProv_attr1"));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("recvPacketProv_attr2")),
        VarExpr::New ("provHashTable_attr5")))));

  result = result->Project (
    RULEQUERY,
    strlist ("provHashTable_attr4",
      "NQID",
      "provHashTable_attr5",
      "recvPacketProv_attr1",
      "recvPacketProv_attr4",
      "provHashTable_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      "ruleQuery_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Idb1Eca1Ins (Ptr<Tuple> provHashTable)
{
  RAPIDNET_LOG_INFO ("Idb1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RECVPACKETPROV)->Join (
    provHashTable,
    strlist ("recvPacketProv_attr3", "recvPacketProv_attr1"),
    strlist ("provHashTable_attr2", "provHashTable_attr1"));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("recvPacketProv_attr2")),
        VarExpr::New ("provHashTable_attr5")))));

  result = result->Project (
    RULEQUERY,
    strlist ("provHashTable_attr4",
      "NQID",
      "provHashTable_attr5",
      "provHashTable_attr1",
      "recvPacketProv_attr4",
      "provHashTable_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      "ruleQuery_attr5",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Idb2Eca2Ins (Ptr<Tuple> recvPacketProv)
{
  RAPIDNET_LOG_INFO ("Idb2Eca2Ins triggered");

  Ptr<Tuple> result = recvPacketProv;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("recvPacketProv_attr1")));

  result->Assign (Assignor::New ("$2",
    VarExpr::New ("recvPacketProv_attr2")));

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    PRESULTTMP,
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "$1",
      "$2",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Idb2Eca2Del (Ptr<Tuple> recvPacketProv)
{
  RAPIDNET_LOG_INFO ("Idb2Eca2Del triggered");

  Ptr<Tuple> result = recvPacketProv;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("recvPacketProv_attr1")));

  result->Assign (Assignor::New ("$2",
    VarExpr::New ("recvPacketProv_attr2")));

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    PRESULTTMP,
    strlist ("recvPacketProv_attr1",
      "recvPacketProv_attr2",
      "$1",
      "$2",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Delete (result);
}

void
PktfwdNormDistHlistOnlineQuery::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Idb9Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb9Eca0Ins triggered");

  Ptr<Tuple> result = pResultTmp;

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("pResultTmp_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "pResultTmp_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVLINK)->Join (
    ruleQuery,
    strlist ("provLink_attr2", "provLink_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVLINK)->Join (
    ruleQuery,
    strlist ("provLink_attr2", "provLink_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("ruleQuery_attr2")),
        VarExpr::New ("provLink_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("provLink_attr5"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    RULEQUERY,
    strlist ("provLink_attr4",
      "NQID",
      "provLink_attr5",
      "ruleQuery_attr4",
      "provLink_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      RN_DEST));

  Send (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVLINK)->Join (
    ruleQuery,
    strlist ("provLink_attr2", "provLink_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("ruleQuery_attr1")));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("ruleQuery_attr2")),
        VarExpr::New ("ruleQuery_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("provLink_attr5"),
      FSha1::New (
        ValueExpr::New (StrValue::New ("NULL"))))));

  result = result->Project (
    BASEQUERY,
    strlist ("ruleQuery_attr1",
      "NQID",
      "ruleQuery_attr5",
      "$1"),
    strlist ("baseQuery_attr1",
      "baseQuery_attr2",
      "baseQuery_attr3",
      "baseQuery_attr4"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr4",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv4_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv6_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("rIterate_attr1")));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr3"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    BASEQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID",
      "$1"),
    strlist ("baseQuery_attr1",
      "baseQuery_attr2",
      "baseQuery_attr3",
      "baseQuery_attr4"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv7_eca (Ptr<Tuple> baseReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    baseReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("baseReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("baseReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("baseReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("baseReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("baseReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv8_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Rv8_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr4", "rResultTmp_attr1"),
    strlist ("rReturn_attr2", "rReturn_attr3", "rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("Buf2"),
      VarExpr::New ("rResultTmp_attr5"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("NQID"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rReturn_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rResultTmp_attr3",
      "rReturn_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv9Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv9Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      Operation::New (RN_PLUS,
        FSize::New (
          VarExpr::New ("rQList_attr3")),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv9Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv9Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      Operation::New (RN_PLUS,
        FSize::New (
          VarExpr::New ("rQList_attr3")),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
PktfwdNormDistHlistOnlineQuery::Rv10_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv10_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("ruleExec_attr3"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

