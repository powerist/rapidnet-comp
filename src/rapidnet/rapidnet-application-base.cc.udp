/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright 2009 University of Pennsylvania
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#include "rapidnet-application-base.h"
#include <ctime>
#include "ns3/ptr.h"
#include "ns3/inet-socket-address.h"
#include "ns3/simulator.h"
#include "ns3/ipv4-value.h"
#include "ns3/uinteger.h"
#include <cstdio>
using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;

NS_LOG_COMPONENT_DEFINE ("RapidNetApplicationBase");
NS_OBJECT_ENSURE_REGISTERED (RapidNetApplicationBase);

TypeId
RapidNetApplicationBase::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::RapidNetApplicationBase")
    .SetParent<Application> ()
    .AddConstructor<RapidNetApplicationBase> ()
    .AddAttribute ("RapidNetPort",
                   "Port for RapidNet application",
                   UintegerValue (11111),
                   MakeUintegerAccessor (&RapidNetApplicationBase::s_Port),
                   MakeUintegerChecker<uint16_t> ())
    ;
  return tid;
}

RapidNetApplicationBase::RapidNetApplicationBase ()
{
  NS_LOG_FUNCTION_NOARGS ();
  SetAddress (Ipv4Address ("0.0.0.0"));
  SetPort (11111);
  m_maxJitter = MAX_JITTER; // Use default
  m_database = Database::New (Ptr<RapidNetApplicationBase> (this));
  m_eventSoftStateDelete = Simulator::ScheduleNow (
    &RapidNetApplicationBase::SoftStateDelete, this);
  m_decoratorFrontend = Ptr<RapidNetDecoratorFrontend> (NULL);
}

RapidNetApplicationBase::~RapidNetApplicationBase()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Ptr<Database>
RapidNetApplicationBase::GetDatabase ()
{
  return m_database;
}

Ptr<Socket>
RapidNetApplicationBase::GetSocket ()
{
  return m_Socket;
}


void
RapidNetApplicationBase::SetAddress (Ipv4Address addr)
{
  m_address = addr;
}

Ipv4Address
RapidNetApplicationBase::GetAddress (void)
{
  return m_address;
}

Ipv4Address
RapidNetApplicationBase::GetIpv4Address (string locspec)
{
  std::vector<std::string> tokens;
  Tokenize (locspec, tokens, ":");
  if (tokens.size() == 0)
    return "0.0.0.0";
  std::vector<std::string>::iterator iter = tokens.begin();
  return Ipv4Address(iter->c_str());
}

uint16_t
RapidNetApplicationBase::GetPort (string locspec)
{
  std::vector<std::string> tokens;
  Tokenize (locspec, tokens, ":");
  if (tokens.size() == 0)
    return 0;
  std::vector<std::string>::iterator iter = tokens.begin();
  iter++;
  return atoi(iter->c_str());
}

string
RapidNetApplicationBase::GetLocSpec (Ipv4Address ipAddr, uint16_t port)
{
  std::stringstream sstream;
  sstream << ipAddr << ":" << port;
  return sstream.str ();
}

void
RapidNetApplicationBase::SetPort (uint16_t port)
{
  s_Port = port;
  RAPIDNET_LOG_INFO ("Port set to " << port);
}

string
RapidNetApplicationBase::GetLocalLocSpec (void)
{
  return GetLocSpec (GetAddress(), GetPort());
}

uint16_t
RapidNetApplicationBase::GetPort ()
{
  return s_Port;
}


void
RapidNetApplicationBase::AddToAddressList (Ipv4Address addr)
{
  m_addressList.push_back(addr);
}

void 
RapidNetApplicationBase::AddInterface (Ipv4Address addr, uint32_t deviceIndex, const string & name)
{
  if (deviceIndex == 0)
  {
    SetAddress(addr); //For CCC
    m_addressToDeviceMap[m_address] = deviceIndex;
    m_deviceNameMap.insert (make_pair (deviceIndex, name));
    m_numDevices ++;
  }
  else
  {
            m_addressList.push_back (addr);
            m_deviceNameList.push_back (name);
            //Build map right now
            m_addressToDeviceMap[addr] = deviceIndex;
            m_deviceNameMap.insert (make_pair (deviceIndex, name));
            m_numDevices ++;
  }
}
      
vector<Ipv4Address>
RapidNetApplicationBase::GetAddressList (void) const
{
  return m_addressList;
}

void
RapidNetApplicationBase::BuildAddressToDeviceMap()
{
  uint32_t deviceIndex = 0;

  // device 0 is reserved for CCC, as done in InstallWifi and InstallIpv4
  m_addressToDeviceMap[m_address] = deviceIndex;
  deviceIndex++;
 
  // left devices are for data 
  for (uint32_t i = 0; i < m_addressList.size(); i++)
  {
	 m_addressToDeviceMap[m_addressList[i] ] = deviceIndex;
	 deviceIndex++;
  }

  // 1 CCC and others are data devices (The Loopback device is not counted)
  m_numDevices = 1 + m_addressList.size ();
}

void
RapidNetApplicationBase::SetDecoratorFrontend (Ptr<RapidNetDecoratorFrontend> decorator)
{
  m_decoratorFrontend = decorator;
}

Ptr<RapidNetDecoratorFrontend>
RapidNetApplicationBase::GetDecoratorFrontend ()
{
  return m_decoratorFrontend;
}

void
RapidNetApplicationBase::Insert (Ptr<Tuple> tuple)
{
  if (tuple->IsEmpty ())
    {
      RAPIDNET_LOG_INFO ("ApplicationBase::Insert: Skipping empty tuple");
      return;
    }

  int status = m_database->Insert (tuple);
  RAPIDNET_LOG_INFO (GetInsertStatusAsString (status) << " " << tuple);
}

void
RapidNetApplicationBase::Insert (Ptr<RelationBase> reln)
{
  list<Ptr<Tuple> > tuples = reln->GetAllTuples ();
  list<Ptr<Tuple> >::iterator it;

  for (it = tuples.begin (); it != tuples.end (); ++it)
    {
      Insert (*it);
    }
}

void
RapidNetApplicationBase::Delete (Ptr<Tuple> tuple)
{
  if (tuple->IsEmpty ())
    {
      RAPIDNET_LOG_INFO ("ApplicationBase::Delete: Skipping empty tuple");
      return;
    }

  RAPIDNET_LOG_INFO ("Deleting " << tuple);
  m_database->Delete (tuple);
}

void
RapidNetApplicationBase::Delete (Ptr<RelationBase> reln)
{
  list<Ptr<Tuple> > tuples = reln->GetAllTuples ();
  list<Ptr<Tuple> >::iterator it;

  for (it = tuples.begin (); it != tuples.end (); ++it)
    {
      Delete (*it);
    }
}

Ptr<RelationBase>
RapidNetApplicationBase::GetRelation (string name)
{
  return m_database->GetRelation (name);
}

void
RapidNetApplicationBase::SetMaxJitter (uint32_t maxJitter)
{
  m_maxJitter = maxJitter;
}

void
RapidNetApplicationBase::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();
  Application::DoDispose ();
}

void
RapidNetApplicationBase::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS();

  InitDatabase();
  InitSocket();
  clog << "Application Started at " << Now () << endl;
}

void
RapidNetApplicationBase::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  if (m_Socket != 0)
    {
      m_Socket->SetRecvCallback(MakeNullCallback<void, Ptr<Socket> > ());
    }
  Simulator::Cancel(m_eventSoftStateDelete);
  clog << "Application Stopped at " << Now () << endl;
}

void
RapidNetApplicationBase::InitSocket(void)
{
  NS_LOG_FUNCTION_NOARGS ();

  if (m_Socket == 0)
    {
      TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
      m_Socket = Socket::CreateSocket (GetNode(), tid);
      InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), s_Port);
      m_Socket->Bind (local);
    }

  m_Socket->SetRecvCallback (MakeCallback (&RapidNetApplicationBase::Receive, this));
}

void
RapidNetApplicationBase::Send (Ptr<Tuple> tuple)
{
  // Do nothing if empty tuple
  if (tuple->IsEmpty ())
    {
      return;
    }

  uint32_t jitter = m_maxJitter == 0 ? 0 : rand () % m_maxJitter;

/*  Simulator::Schedule (MilliSeconds (jitter),
    &RapidNetApplicationBase::DoSend, this, tuple);*/
  DoSend (tuple);
}

void
RapidNetApplicationBase::DoSend (Ptr<Tuple> tuple)//, uint32_t flags, const InetSocketAddress& addr)
{
  if (!tuple->HasAttribute (RN_ACTION))
    {
      OnSend.Invoke(tuple);
    }
  Ptr<TupleAttribute> attribute = tuple->GetAttribute(RN_DEST);
  Ptr<Value> value = attribute->GetValue();
  
  string destLocSpec = value->ToString();

  Ipv4Address destIpv4 = GetIpv4Address (destLocSpec);
  uint16_t destPort = GetPort (destLocSpec);
  //uint16_t destPort = GetPort ();

  tuple->RemoveAttribute (RN_DEST);

  if (destIpv4 == m_address)
    {
      destIpv4 = HOME_IP;
    }

  InetSocketAddress addr = InetSocketAddress (destIpv4, destPort);
  Ptr<Packet> packet = Create<Packet> ();
  packet->AddHeader (RapidNetHeader (tuple));

  if (!tuple->HasAttribute (RN_ACTION))
    {
      RAPIDNET_LOG_INFO ("Sending " << tuple << " to: " << addr.GetIpv4 () << " port: " << addr.GetPort());
    }
  m_Socket->SendTo (packet, 0, addr);
}

void
RapidNetApplicationBase::SendLocal (Ptr<Tuple> tuple)
{
  string localLocSpec = GetLocSpec (HOME_IP, GetPort());
  tuple->AddAttribute (TupleAttribute::New (RN_DEST, StrValue::New (localLocSpec)));
  //No need to add jitter for local sending
  DoSend (tuple);
}

void
RapidNetApplicationBase::SendBroadcast (Ptr<Tuple> tuple)
{
  Ptr<Packet> packet = Create<Packet> ();
  packet->AddHeader (RapidNetHeader (tuple));

  RAPIDNET_LOG_INFO ("Sending Broadcast ");
  m_Socket->SendTo (packet, 0, InetSocketAddress (Ipv4Address("255.255.255.255"), s_Port));
}

void
RapidNetApplicationBase::Send (Ptr<RelationBase> reln)
{
  list<Ptr<Tuple> > tuples = reln->GetAllTuples ();
  list<Ptr<Tuple> >::iterator it;

  for (it = tuples.begin (); it != tuples.end (); ++it)
    {
      Send (*it);
    }
}

void
RapidNetApplicationBase::SendLocal (Ptr<RelationBase> reln)
{
  list<Ptr<Tuple> > tuples = reln->GetAllTuples ();
  list<Ptr<Tuple> >::iterator it;

  for (it = tuples.begin (); it != tuples.end (); ++it)
    {
      SendLocal (*it);
    }
}

void
RapidNetApplicationBase::Receive (Ptr<Socket> socket)
{
  //cout<<"In RapidNetApplicationBase Receive"<<endl;
  NS_LOG_FUNCTION (this << socket);
  Ptr<Packet> packet;
  Address from;
  while (packet = socket->RecvFrom (from))
    {
      if (InetSocketAddress::IsMatchingType (from))
        {
          RapidNetHeader header;
          packet->RemoveHeader (header);
          Ptr<Tuple> tuple = header.GetTuple ();

          Ipv4Address fromIpv4 = InetSocketAddress::ConvertFrom (from).GetIpv4 ();
          uint16_t fromPort = InetSocketAddress::ConvertFrom(from).GetPort ();
          //if (!tuple->HasAttribute (RN_ACTION))
          {
              RAPIDNET_LOG_INFO ("Received " << tuple << " from " << fromIpv4);
          }
		  
			  //Add -src attribute
			  	  
          string srcLocSpec = GetLocSpec (fromIpv4, fromPort);
          tuple->OverwriteAttribute (TupleAttribute::New (RN_SRC,
           StrValue::New (srcLocSpec)));
           
          DemuxRecv (tuple);
          
        }
    }
}

Ptr<Tuple>
RapidNetApplicationBase::CreateNewTuple (string name)
{
  return Tuple::New (name);
}

Ptr<Relation>
RapidNetApplicationBase::CreateNewRelation (string name)
{
  Ptr<RelationBase> reln = Relation::New (name);

  Ptr<InsertTrigger> insTrigger = Create<InsertTrigger> ();
  insTrigger->SetApplication (Ptr<RapidNetApplicationBase> (this));
  reln->OnInsert += insTrigger;

  Ptr<DeleteTrigger> delTrigger = Create<DeleteTrigger> ();
  delTrigger->SetApplication (Ptr<RapidNetApplicationBase> (this));
  reln->OnDelete += delTrigger;

  Ptr<RefreshTrigger> refTrigger = Create<RefreshTrigger> ();
  refTrigger->SetApplication (Ptr<RapidNetApplicationBase> (this));
  reln->OnRefresh += refTrigger;

  return Ptr<Relation> (dynamic_cast<Relation*> (PeekPointer (reln)));
}

void
RapidNetApplicationBase::AddRelationWithKeys (string relnName,
  list<attrdeftype> attributes, Time ttl)
{
  Ptr<Relation> reln = CreateNewRelation (relnName);
  list<attrdeftype>::iterator it;

  for (it = attributes.begin (); it != attributes.end (); it++)
    {
      reln->AddKeyAttribute (*it);
    }
  reln->SetTimeToLive (ttl);
  m_database->AddRelation (reln);
}

void
RapidNetApplicationBase::AddHeapRelationWithKeys (string relnName,
  list<attrdeftype> attributes, string heapAttr, HeapRelation::Type type,
  uint32_t size, Time ttl)
{
  Ptr<HeapRelation> reln = HeapRelation::New (relnName, heapAttr, type, size);

  Ptr<InsertTrigger> insTrigger = Create<InsertTrigger> ();
  insTrigger->SetApplication (Ptr<RapidNetApplicationBase> (this));
  reln->OnInsert += insTrigger;

  Ptr<DeleteTrigger> delTrigger = Create<DeleteTrigger> ();
  delTrigger->SetApplication (Ptr<RapidNetApplicationBase> (this));
  reln->OnDelete += delTrigger;

  Ptr<RefreshTrigger> refTrigger = Create<RefreshTrigger> ();
  refTrigger->SetApplication (Ptr<RapidNetApplicationBase> (this));
  reln->OnRefresh += refTrigger;

  list<attrdeftype>::iterator it;

  for (it = attributes.begin (); it != attributes.end (); it++)
    {
      reln->AddKeyAttribute (*it);
    }
  reln->SetTimeToLive (ttl);
  m_database->AddRelation (reln);
}

void
RapidNetApplicationBase::DemuxRecv (Ptr<Tuple> tuple)
{
  if (IsInsertEvent (tuple))
    {
      OnInsert.Invoke (tuple);
    }
  if (IsDeleteEvent (tuple))
    {
      OnDelete.Invoke (tuple);
    } 
   if (IsRecvEvent(tuple))
    {
      OnRecv.Invoke(tuple);
    }
}

#define IS_EXTERNAL(tuple) (!tuple->HasAttribute (RN_SRC))

#define IS_INTERNAL(tuple) \
   ((GetIpv4Address(str_value(tuple->GetAttribute (RN_SRC))) == m_address || \
   GetIpv4Address(str_value (tuple->GetAttribute (RN_SRC))) == HOME_IP) && \
    (GetPort(str_value (tuple->GetAttribute (RN_SRC))) == s_Port))

bool
RapidNetApplicationBase::IsInsertEvent (Ptr<Tuple> tuple)
{
  //cout<<"In RapidNetApplicationBase IsInsertEvent"<<endl;

  bool isInsert = tuple->HasAttribute (RN_ACTION) &&
    tuple->GetAttribute (RN_ACTION)->GetValue ()->ToString () == RN_INSERT;

  return IS_INTERNAL(tuple) && isInsert;
}

bool
RapidNetApplicationBase::IsInsertEvent (Ptr<Tuple> tuple, string name)
{
  //cout<<"In RapidNetApplicationBase IsInsertEvent2 with Name: "<<name<<endl;

  bool isNameMatch = tuple->GetName () == name;

  return isNameMatch && IsInsertEvent (tuple);
}

bool
RapidNetApplicationBase::IsDeleteEvent (Ptr<Tuple> tuple)
{
  //cout<<"In RapidNetApplicationBase IsDeleteEvent"<<endl;

  bool isDelete = tuple->HasAttribute (RN_ACTION) &&
    tuple->GetAttribute (RN_ACTION)->GetValue ()->ToString () == RN_DELETE;

  return IS_INTERNAL(tuple) && isDelete;
}

bool
RapidNetApplicationBase::IsDeleteEvent (Ptr<Tuple> tuple, string name)
{
  //cout<<"In RapidNetApplicationBase IsDeleteEvent2 with Name: "<<name<<endl;

  bool isNameMatch = tuple->GetName () == name;

  return isNameMatch && IsDeleteEvent (tuple);
}

bool
RapidNetApplicationBase::IsRefreshEvent (Ptr<Tuple> tuple, string name)
{
  //cout<<"In RapidNetApplicationBase IsRefreshEvent with Name: "<<name<<endl;

  bool isNameMatch = tuple->GetName () == name;

  bool isRefresh = tuple->HasAttribute (RN_ACTION) &&
    tuple->GetAttribute (RN_ACTION)->GetValue ()->ToString () == RN_REFRESH;

  return isNameMatch && IS_INTERNAL(tuple) && isRefresh;
}

bool
RapidNetApplicationBase::IsRecvEvent (Ptr<Tuple> tuple)
{
  //cout<<"In RapidNetApplicationBase IsRecvEvent"<<endl;

  return tuple->HasAttribute (RN_SRC)
      && GetIpv4Address(str_value (tuple->GetAttribute (RN_SRC))) != m_address;
}

bool
RapidNetApplicationBase::IsRecvEvent (Ptr<Tuple> tuple, string name)
{

  //cout<<"In RapidNetApplicationBase IsRecvEvent2 with Name: "<<name<<endl;

  return tuple->GetName () == name &&
    IsRecvEvent (tuple);
}

void
RapidNetApplicationBase::SoftStateDelete ()
{
  //RAPIDNET_LOG_INFO ("Checking for timed out tuples");
  map<string, Ptr<RelationBase> > relations = m_database->GetAllRelations ();
  Time now = Simulator::Now ();

  for (map<string, Ptr<RelationBase> >::iterator it = relations.begin ();
    it != relations.end (); it ++)
    {
      Ptr<RelationBase> relation = it->second;
      Time ttl = relation->GetTimeToLive ();
      list<Ptr<Tuple> > tuples = relation->GetAllTuples ();
      for (list<Ptr<Tuple> >::iterator jt = tuples.begin (); jt != tuples.end (); ++jt)
        {
          if (HasTimedout ((*jt)->GetTimestamp (), ttl, now))
            {
              RAPIDNET_LOG_INFO ("Timed out " << *jt << " timestamp: " << (*jt)->GetTimestamp ());
              Delete (*jt);
            }
        }
    }

  m_eventSoftStateDelete = Simulator::Schedule (SOFTSTATE_DELETE_PERIOD,
    &RapidNetApplicationBase::SoftStateDelete, this);
}

void
InsertTrigger::Invoke (Ptr<Tuple> tuple)
{
  tuple->OverwriteAttribute (TupleAttribute::New (RN_ACTION, StrValue::New (
    RN_INSERT)));
  GetApplication ()->SendLocal (tuple);
}

void
DeleteTrigger::Invoke (Ptr<Tuple> tuple)
{
  tuple->OverwriteAttribute (TupleAttribute::New (RN_ACTION, StrValue::New (
    RN_DELETE)));
  GetApplication ()->SendLocal (tuple);
}

void
RefreshTrigger::Invoke (Ptr<Tuple> tuple)
{
  tuple->OverwriteAttribute (TupleAttribute::New (RN_ACTION, StrValue::New (
    RN_REFRESH)));
  GetApplication ()->SendLocal (tuple);
}

void 
RapidNetApplicationBase::Tokenize(const std::string& str,
    std::vector<std::string>& tokens,
    const std::string& delimiters)
{
  // Skip delimiters at beginning.
  std::string::size_type lastPos = str.find_first_not_of(delimiters, 0);
  // Find first "non-delimiter".
  std::string::size_type pos = str.find_first_of(delimiters, lastPos);

  while (std::string::npos != pos || std::string::npos != lastPos)
  {
    // Found a token, add it to the vector.
    tokens.push_back(str.substr(lastPos, pos - lastPos));
    // Skip delimiters.  Note the "not_of"
    lastPos = str.find_first_not_of(delimiters, pos);
    // Find next "non-delimiter"
    pos = str.find_first_of(delimiters, lastPos);
  }
}
